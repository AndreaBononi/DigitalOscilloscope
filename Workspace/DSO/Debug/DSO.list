
DSO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e48  08004e48  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e50  08004e50  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d2c  20000028  08004e80  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d54  08004e80  00020d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d67a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fce  00000000  00000000  0002d6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001651f  00000000  00000000  00031228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7e6  00000000  00000000  00047747  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d1db  00000000  00000000  00051f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  000df184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e18 	.word	0x08004e18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08004e18 	.word	0x08004e18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <DSO_UserCode>:
static int isTrigger(int index);		// definizione funzione locale che verifica se un campione corrisponde al trigger

static volatile int prova = 0;

void DSO_UserCode()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
	int shift, RX_Stat, bufferIndex, parity, bufferIndexBound, blockStatus;

	adcBuffer1[0] = '*';
 80004da:	4bab      	ldr	r3, [pc, #684]	; (8000788 <DSO_UserCode+0x2b4>)
 80004dc:	222a      	movs	r2, #42	; 0x2a
 80004de:	701a      	strb	r2, [r3, #0]
	adcBuffer1[BUFFER_DIMENSION - 1] = '#';
 80004e0:	4ba9      	ldr	r3, [pc, #676]	; (8000788 <DSO_UserCode+0x2b4>)
 80004e2:	2223      	movs	r2, #35	; 0x23
 80004e4:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
	adcBuffer2[0] = '*';
 80004e8:	4ba8      	ldr	r3, [pc, #672]	; (800078c <DSO_UserCode+0x2b8>)
 80004ea:	222a      	movs	r2, #42	; 0x2a
 80004ec:	701a      	strb	r2, [r3, #0]
	adcBuffer2[BUFFER_DIMENSION - 1] = '#';
 80004ee:	4ba7      	ldr	r3, [pc, #668]	; (800078c <DSO_UserCode+0x2b8>)
 80004f0:	2223      	movs	r2, #35	; 0x23
 80004f2:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff

	// CONTROLLIAMO SE È DISPONIBILE UN NUOVO DATO DA INVIARE:
	if ((DE_GetBufferStatus(DE_ADCBUFFER1) == DE_FULLBUFFER) || (DE_GetBufferStatus(DE_ADCBUFFER2) == DE_FULLBUFFER))
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 fd88 	bl	800100c <DE_GetBufferStatus>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d006      	beq.n	8000510 <DSO_UserCode+0x3c>
 8000502:	2002      	movs	r0, #2
 8000504:	f000 fd82 	bl	800100c <DE_GetBufferStatus>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	f040 80ec 	bne.w	80006e8 <DSO_UserCode+0x214>
	{
		parity = triggerPosition % 2;								// triggerPosition PARI --> parity = 0, altrimenti parity = 1;
 8000510:	4b9f      	ldr	r3, [pc, #636]	; (8000790 <DSO_UserCode+0x2bc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	bfb8      	it	lt
 800051c:	425b      	neglt	r3, r3
 800051e:	60bb      	str	r3, [r7, #8]
		// COPIA DI ADCBUFFER IN MAINBUFFER:
		if(DE_GetBufferStatus(DE_ADCBUFFER1) == DE_FULLBUFFER)		// il buffer contenente il dato da trasmettere è adcBuffer1
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fd73 	bl	800100c <DE_GetBufferStatus>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d133      	bne.n	8000594 <DSO_UserCode+0xc0>
		{
			// Se blockStatus è STARTBLOCK, il buffer contiene dati validi ma non è mai stato del tutto riempito
			// In questo caso una parte dei campioni passati si trova già in mainBuffer, quindi adcBuffer non deve essere interamente copiato
			blockStatus = DE_GetBlockStatus(DE_ADCBUFFER1);
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fdf9 	bl	8001124 <DE_GetBlockStatus>
 8000532:	6078      	str	r0, [r7, #4]
			if(blockStatus == DE_STARTBLOCK)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d10e      	bne.n	8000558 <DSO_UserCode+0x84>
			{
				// Arrivati a questo punto, la posizione del trigger dovrebbe sempre essere < della metà del buffer
				// Per sicurezza è sempre meglio inserire un controllo
				if(triggerPosition > ((BUFFER_DIMENSION - 2) / 2))
 800053a:	4b95      	ldr	r3, [pc, #596]	; (8000790 <DSO_UserCode+0x2bc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000542:	db01      	blt.n	8000548 <DSO_UserCode+0x74>
				{
					Error_Handler();
 8000544:	f001 f848 	bl	80015d8 <Error_Handler>
				}
				bufferIndexBound = triggerPosition + ((BUFFER_DIMENSION - 4) / 2) + parity;
 8000548:	4b91      	ldr	r3, [pc, #580]	; (8000790 <DSO_UserCode+0x2bc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	4413      	add	r3, r2
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e008      	b.n	800056a <DSO_UserCode+0x96>
			}
			else if (blockStatus == DE_FOLLOWINGBLOCK)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d103      	bne.n	8000566 <DSO_UserCode+0x92>
			{
				bufferIndexBound = BUFFER_DIMENSION - 1;
 800055e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e001      	b.n	800056a <DSO_UserCode+0x96>
			}
			else
			{
				Error_Handler();
 8000566:	f001 f837 	bl	80015d8 <Error_Handler>
			}
			for (bufferIndex = 0; bufferIndex <= bufferIndexBound; bufferIndex++)
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	e00c      	b.n	800058a <DSO_UserCode+0xb6>
			{
				mainBuffer[bufferIndex] = adcBuffer1[bufferIndex];
 8000570:	4a85      	ldr	r2, [pc, #532]	; (8000788 <DSO_UserCode+0x2b4>)
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	4413      	add	r3, r2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2d9      	uxtb	r1, r3
 800057a:	4a86      	ldr	r2, [pc, #536]	; (8000794 <DSO_UserCode+0x2c0>)
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	4413      	add	r3, r2
 8000580:	460a      	mov	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
			for (bufferIndex = 0; bufferIndex <= bufferIndexBound; bufferIndex++)
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	3301      	adds	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	429a      	cmp	r2, r3
 8000590:	ddee      	ble.n	8000570 <DSO_UserCode+0x9c>
 8000592:	e032      	b.n	80005fa <DSO_UserCode+0x126>
			}
		}
		else	// il buffer contenente il dato da trasmettere è adcBuffer1, ripetiamo le operazioni precedenti
		{
			blockStatus = DE_GetBlockStatus(DE_ADCBUFFER2);
 8000594:	2002      	movs	r0, #2
 8000596:	f000 fdc5 	bl	8001124 <DE_GetBlockStatus>
 800059a:	6078      	str	r0, [r7, #4]
			if(blockStatus == DE_STARTBLOCK)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d10e      	bne.n	80005c0 <DSO_UserCode+0xec>
			{
				if(triggerPosition > ((BUFFER_DIMENSION - 2) / 2))
 80005a2:	4b7b      	ldr	r3, [pc, #492]	; (8000790 <DSO_UserCode+0x2bc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005aa:	db01      	blt.n	80005b0 <DSO_UserCode+0xdc>
				{
					Error_Handler();
 80005ac:	f001 f814 	bl	80015d8 <Error_Handler>
				}
				bufferIndexBound = triggerPosition + ((BUFFER_DIMENSION - 4) / 2) + parity;
 80005b0:	4b77      	ldr	r3, [pc, #476]	; (8000790 <DSO_UserCode+0x2bc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	4413      	add	r3, r2
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	e008      	b.n	80005d2 <DSO_UserCode+0xfe>
			}
			else if (blockStatus == DE_FOLLOWINGBLOCK)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d103      	bne.n	80005ce <DSO_UserCode+0xfa>
			{
				bufferIndexBound = BUFFER_DIMENSION - 1;
 80005c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e001      	b.n	80005d2 <DSO_UserCode+0xfe>
			}
			else
			{
				Error_Handler();
 80005ce:	f001 f803 	bl	80015d8 <Error_Handler>
			}
			for (bufferIndex = 0; bufferIndex <= bufferIndexBound; bufferIndex++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
 80005d6:	e00c      	b.n	80005f2 <DSO_UserCode+0x11e>
			{
				mainBuffer[bufferIndex] = adcBuffer2[bufferIndex];
 80005d8:	4a6c      	ldr	r2, [pc, #432]	; (800078c <DSO_UserCode+0x2b8>)
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2d9      	uxtb	r1, r3
 80005e2:	4a6c      	ldr	r2, [pc, #432]	; (8000794 <DSO_UserCode+0x2c0>)
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	4413      	add	r3, r2
 80005e8:	460a      	mov	r2, r1
 80005ea:	701a      	strb	r2, [r3, #0]
			for (bufferIndex = 0; bufferIndex <= bufferIndexBound; bufferIndex++)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	3301      	adds	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	ddee      	ble.n	80005d8 <DSO_UserCode+0x104>
			}
		}
		// ALLINEAMENTO BUFFER:
		if(SER_GetTxState() == SER_TX_EMPTY)						// CANALE DI TRASMISSIONE LIBERO
 80005fa:	f001 f803 	bl	8001604 <SER_GetTxState>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d16f      	bne.n	80006e4 <DSO_UserCode+0x210>
		{
			// SHIFT:
			if (triggerPosition < ((BUFFER_DIMENSION - 2) / 2))		// SHIFT A DESTRA
 8000604:	4b62      	ldr	r3, [pc, #392]	; (8000790 <DSO_UserCode+0x2bc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800060c:	dc1e      	bgt.n	800064c <DSO_UserCode+0x178>
			{
				if (parity == 0)									// indice pari, campione associato al CH1, deve portarsi in posizione 512
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d105      	bne.n	8000620 <DSO_UserCode+0x14c>
				{
					shift = (((BUFFER_DIMENSION - 2) / 2) + 1) - triggerPosition;
 8000614:	4b5e      	ldr	r3, [pc, #376]	; (8000790 <DSO_UserCode+0x2bc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800061c:	61fb      	str	r3, [r7, #28]
 800061e:	e005      	b.n	800062c <DSO_UserCode+0x158>
				}
				else    											// indice dispari, campione associato al CH0, deve portarsi in posizione 511
				{
					shift = ((BUFFER_DIMENSION - 2) / 2) - triggerPosition;
 8000620:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <DSO_UserCode+0x2bc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8000628:	3301      	adds	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
				}
				for (int i = 0; i < shift; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e007      	b.n	8000642 <DSO_UserCode+0x16e>
				{
					DO_BufferRightShift(mainBuffer, BUFFER_DIMENSION);
 8000632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000636:	4857      	ldr	r0, [pc, #348]	; (8000794 <DSO_UserCode+0x2c0>)
 8000638:	f000 fdbc 	bl	80011b4 <DO_BufferRightShift>
				for (int i = 0; i < shift; i++)
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	3301      	adds	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf3      	blt.n	8000632 <DSO_UserCode+0x15e>
 800064a:	e01c      	b.n	8000686 <DSO_UserCode+0x1b2>
				}
			}
			else    												// SHIFT A SINISTRA
			{
				if (parity == 0)									// indice pari, campione associato al CH1, deve portarsi in posizione 512
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <DSO_UserCode+0x18a>
				{
					shift = triggerPosition - (((BUFFER_DIMENSION - 2) / 2) + 1);
 8000652:	4b4f      	ldr	r3, [pc, #316]	; (8000790 <DSO_UserCode+0x2bc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800065a:	61fb      	str	r3, [r7, #28]
 800065c:	e004      	b.n	8000668 <DSO_UserCode+0x194>
				}
				else    											// indice dispari, campione associato al CH0, deve portarsi in posizione 511
				{
					shift = triggerPosition - ((BUFFER_DIMENSION - 2) / 2);
 800065e:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <DSO_UserCode+0x2bc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 8000666:	61fb      	str	r3, [r7, #28]
				}
				for (int i = 0; i < shift; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e007      	b.n	800067e <DSO_UserCode+0x1aa>
				{
					DO_BufferLeftShift(mainBuffer, BUFFER_DIMENSION);
 800066e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000672:	4848      	ldr	r0, [pc, #288]	; (8000794 <DSO_UserCode+0x2c0>)
 8000674:	f000 fd72 	bl	800115c <DO_BufferLeftShift>
				for (int i = 0; i < shift; i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf3      	blt.n	800066e <DSO_UserCode+0x19a>
				}
			}
			// INVIO DATO:
			HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2120      	movs	r1, #32
 800068a:	4843      	ldr	r0, [pc, #268]	; (8000798 <DSO_UserCode+0x2c4>)
 800068c:	f002 fb92 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_TXstatus = HAL_UART_Transmit_IT(&huart2, (uint8_t *)mainBuffer, sizeof(mainBuffer));
 8000690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000694:	493f      	ldr	r1, [pc, #252]	; (8000794 <DSO_UserCode+0x2c0>)
 8000696:	4841      	ldr	r0, [pc, #260]	; (800079c <DSO_UserCode+0x2c8>)
 8000698:	f003 fd59 	bl	800414e <HAL_UART_Transmit_IT>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <DSO_UserCode+0x2cc>)
 80006a2:	701a      	strb	r2, [r3, #0]
			// Rimozione segnalazione buffer pieno:
			if(DE_GetBufferStatus(DE_ADCBUFFER1) == DE_FULLBUFFER)
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fcb1 	bl	800100c <DE_GetBufferStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d108      	bne.n	80006c2 <DSO_UserCode+0x1ee>
			{
				if(DE_SetBufferAsEmpty(DE_ADCBUFFER1) == DE_ERROR)
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fcc7 	bl	8001044 <DE_SetBufferAsEmpty>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d10a      	bne.n	80006d2 <DSO_UserCode+0x1fe>
				{
					Error_Handler();
 80006bc:	f000 ff8c 	bl	80015d8 <Error_Handler>
 80006c0:	e007      	b.n	80006d2 <DSO_UserCode+0x1fe>
				}
			}
			else
			{
				if(DE_SetBufferAsEmpty(DE_ADCBUFFER2) == DE_ERROR)
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 fcbe 	bl	8001044 <DE_SetBufferAsEmpty>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d101      	bne.n	80006d2 <DSO_UserCode+0x1fe>
				{
					Error_Handler();
 80006ce:	f000 ff83 	bl	80015d8 <Error_Handler>
				}
			}
			// Impostazione canale di trasmissione come occupato:
			if(SER_SetTxState(SER_TX_FULL) != SER_OK)
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 ffca 	bl	800166c <SER_SetTxState>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d004      	beq.n	80006e8 <DSO_UserCode+0x214>
			{
				Error_Handler();
 80006de:	f000 ff7b 	bl	80015d8 <Error_Handler>
 80006e2:	e001      	b.n	80006e8 <DSO_UserCode+0x214>
			}
		}
		else	// mainBuffer è stato aggiornato prima che la trasmissione precedente fosse finita
		{
			Error_Handler();
 80006e4:	f000 ff78 	bl	80015d8 <Error_Handler>
		}
	}

	// CONTROLLIAMO LO STATO DEL RICEVITORE:
	RX_Stat = SER_GetRxState();
 80006e8:	f000 ff80 	bl	80015ec <SER_GetRxState>
 80006ec:	6038      	str	r0, [r7, #0]
	if (RX_Stat == SER_RX_SP || RX_Stat == SER_RX_TL || RX_Stat == SER_RX_TT)	// se la condizione è vera, è disponibile un nuovo dato
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	d006      	beq.n	8000702 <DSO_UserCode+0x22e>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d003      	beq.n	8000702 <DSO_UserCode+0x22e>
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	f040 8099 	bne.w	8000834 <DSO_UserCode+0x360>
	{
		// Fermiamo il sistema e ri-inizializziamolo:
		DE_SystemDisable();
 8000702:	f000 fc27 	bl	8000f54 <DE_SystemDisable>
		missingSamples = BUFFER_DIMENSION - 2;
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <DSO_UserCode+0x2d0>)
 8000708:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800070c:	601a      	str	r2, [r3, #0]
		DE_SetTriggerAsUndetected();
 800070e:	f000 fc51 	bl	8000fb4 <DE_SetTriggerAsUndetected>
		if(DE_SetBufferAsEmpty(DE_ADCBUFFER1) == DE_ERROR)
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fc96 	bl	8001044 <DE_SetBufferAsEmpty>
 8000718:	4603      	mov	r3, r0
 800071a:	2b03      	cmp	r3, #3
 800071c:	d101      	bne.n	8000722 <DSO_UserCode+0x24e>
		{
			Error_Handler();
 800071e:	f000 ff5b 	bl	80015d8 <Error_Handler>
		}
		if(DE_SetBufferAsEmpty(DE_ADCBUFFER2) == DE_ERROR)
 8000722:	2002      	movs	r0, #2
 8000724:	f000 fc8e 	bl	8001044 <DE_SetBufferAsEmpty>
 8000728:	4603      	mov	r3, r0
 800072a:	2b03      	cmp	r3, #3
 800072c:	d101      	bne.n	8000732 <DSO_UserCode+0x25e>
		{
			Error_Handler();
 800072e:	f000 ff53 	bl	80015d8 <Error_Handler>
		}
		// Aggiornamento:
		if (RX_Stat == SER_RX_SP)						// AGGIORNAMENTO SAMPLING PERIOD
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b06      	cmp	r3, #6
 8000736:	d141      	bne.n	80007bc <DSO_UserCode+0x2e8>
		{
			samplingPeriod = (SP[0] << 24) | (SP [1] << 16) | (SP[2] << 8) | SP[3];
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <DSO_UserCode+0x2d4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	061a      	lsls	r2, r3, #24
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <DSO_UserCode+0x2d4>)
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	041b      	lsls	r3, r3, #16
 8000748:	431a      	orrs	r2, r3
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <DSO_UserCode+0x2d4>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4313      	orrs	r3, r2
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <DSO_UserCode+0x2d4>)
 8000756:	78d2      	ldrb	r2, [r2, #3]
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	4313      	orrs	r3, r2
 800075c:	461a      	mov	r2, r3
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <DSO_UserCode+0x2d8>)
 8000760:	601a      	str	r2, [r3, #0]
			reloadValue = samplingPeriod / 2000;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <DSO_UserCode+0x2d8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <DSO_UserCode+0x2dc>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	09db      	lsrs	r3, r3, #7
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <DSO_UserCode+0x2e0>)
 8000770:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_AUTORELOAD(&htim3, reloadValue);
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <DSO_UserCode+0x2e4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <DSO_UserCode+0x2e0>)
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <DSO_UserCode+0x2e0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <DSO_UserCode+0x2e4>)
 8000782:	60d3      	str	r3, [r2, #12]
 8000784:	e048      	b.n	8000818 <DSO_UserCode+0x344>
 8000786:	bf00      	nop
 8000788:	20000054 	.word	0x20000054
 800078c:	20000454 	.word	0x20000454
 8000790:	20000050 	.word	0x20000050
 8000794:	20000868 	.word	0x20000868
 8000798:	40020000 	.word	0x40020000
 800079c:	20000d10 	.word	0x20000d10
 80007a0:	20000c69 	.word	0x20000c69
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	20000860 	.word	0x20000860
 80007ac:	20000048 	.word	0x20000048
 80007b0:	10624dd3 	.word	0x10624dd3
 80007b4:	20000044 	.word	0x20000044
 80007b8:	20000c88 	.word	0x20000c88
		}
		else if (RX_Stat == SER_RX_TL)					// AGGIORNAMENTO TRIGGER LEVEL
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d106      	bne.n	80007d0 <DSO_UserCode+0x2fc>
		{
			triggerLevel = TL[0];
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <DSO_UserCode+0x368>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <DSO_UserCode+0x36c>)
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e023      	b.n	8000818 <DSO_UserCode+0x344>
		}
		else if (RX_Stat == SER_RX_TT)					// CAMBIO MODALITÀ DI LAVORO
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d120      	bne.n	8000818 <DSO_UserCode+0x344>
		{
			if(TT[0] == 0x00)
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <DSO_UserCode+0x370>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d103      	bne.n	80007e8 <DSO_UserCode+0x314>
			{
				mode = AUTO;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <DSO_UserCode+0x374>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	e017      	b.n	8000818 <DSO_UserCode+0x344>
			}
			else if(TT[0] == 0x01)
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <DSO_UserCode+0x370>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d103      	bne.n	80007fa <DSO_UserCode+0x326>
			{
				mode = NORMAL;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <DSO_UserCode+0x374>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e00e      	b.n	8000818 <DSO_UserCode+0x344>
			}
			else if(TT[0] == 0x02)
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <DSO_UserCode+0x370>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b02      	cmp	r3, #2
 8000802:	d106      	bne.n	8000812 <DSO_UserCode+0x33e>
			{
				mode = SINGLE;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <DSO_UserCode+0x374>)
 8000806:	2202      	movs	r2, #2
 8000808:	601a      	str	r2, [r3, #0]
				prova = 1;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <DSO_UserCode+0x378>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e002      	b.n	8000818 <DSO_UserCode+0x344>
			}
			else
			{
				mode = STOP;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <DSO_UserCode+0x374>)
 8000814:	2203      	movs	r2, #3
 8000816:	601a      	str	r2, [r3, #0]
			}
		}
		if(mode != STOP)
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <DSO_UserCode+0x374>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d001      	beq.n	8000824 <DSO_UserCode+0x350>
		{
			DE_SystemEnable();							// facciamo ripartire il rilevamento del trigger
 8000820:	f000 fb8c 	bl	8000f3c <DE_SystemEnable>
		}
		if(SER_SetRxState(SER_RX_EMPTY) != SER_OK)   	// impostiamo linea di ricezione libera
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fef9 	bl	800161c <SER_SetRxState>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <DSO_UserCode+0x360>
		{
			Error_Handler();
 8000830:	f000 fed2 	bl	80015d8 <Error_Handler>
		}
	}
}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000085c 	.word	0x2000085c
 8000840:	20000000 	.word	0x20000000
 8000844:	20000858 	.word	0x20000858
 8000848:	2000004c 	.word	0x2000004c
 800084c:	20000c6c 	.word	0x20000c6c

08000850 <DSO_StartRX>:



void DSO_StartRX()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_RXstatus = HAL_UART_Receive_IT(&huart2, (uint8_t *)OpCode_Buffer, sizeof(OpCode_Buffer));
 8000854:	2203      	movs	r2, #3
 8000856:	4905      	ldr	r1, [pc, #20]	; (800086c <DSO_StartRX+0x1c>)
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <DSO_StartRX+0x20>)
 800085a:	f003 fcbd 	bl	80041d8 <HAL_UART_Receive_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <DSO_StartRX+0x24>)
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000854 	.word	0x20000854
 8000870:	20000d10 	.word	0x20000d10
 8000874:	20000c68 	.word	0x20000c68

08000878 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if(HAL_TXstatus != HAL_OK)
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_UART_TxCpltCallback+0x64>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <HAL_UART_TxCpltCallback+0x18>
	{
		Error_Handler();
 800088a:	f000 fea5 	bl	80015d8 <Error_Handler>
		if(prova == 1)
		{
			prova = 0;
		}
	}
}
 800088e:	e021      	b.n	80008d4 <HAL_UART_TxCpltCallback+0x5c>
	else if(huart == &huart2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <HAL_UART_TxCpltCallback+0x68>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d11d      	bne.n	80008d4 <HAL_UART_TxCpltCallback+0x5c>
		if(SER_SetTxState(SER_TX_EMPTY) != SER_OK)		// impostiamo il canale di trasmissione come libero
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fee7 	bl	800166c <SER_SetTxState>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_UART_TxCpltCallback+0x30>
			Error_Handler();
 80008a4:	f000 fe98 	bl	80015d8 <Error_Handler>
		if ((mode != SINGLE) && (mode != STOP))
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_TxCpltCallback+0x6c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d005      	beq.n	80008bc <HAL_UART_TxCpltCallback+0x44>
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_UART_TxCpltCallback+0x6c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d001      	beq.n	80008bc <HAL_UART_TxCpltCallback+0x44>
			DE_SystemEnable();    						// riabilita il sistema ad essere sensibile ai trigger
 80008b8:	f000 fb40 	bl	8000f3c <DE_SystemEnable>
		HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2120      	movs	r1, #32
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <HAL_UART_TxCpltCallback+0x70>)
 80008c2:	f002 fa77 	bl	8002db4 <HAL_GPIO_WritePin>
		if(prova == 1)
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_UART_TxCpltCallback+0x74>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d102      	bne.n	80008d4 <HAL_UART_TxCpltCallback+0x5c>
			prova = 0;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_UART_TxCpltCallback+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000c69 	.word	0x20000c69
 80008e0:	20000d10 	.word	0x20000d10
 80008e4:	2000004c 	.word	0x2000004c
 80008e8:	40020000 	.word	0x40020000
 80008ec:	20000c6c 	.word	0x20000c6c

080008f0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	int SER_Status, RX_Status;
	RX_Status = SER_GetRxState();
 80008f8:	f000 fe78 	bl	80015ec <SER_GetRxState>
 80008fc:	60b8      	str	r0, [r7, #8]

    if(HAL_RXstatus != HAL_OK)
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <HAL_UART_RxCpltCallback+0x170>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <HAL_UART_RxCpltCallback+0x1e>
    {
    	Error_Handler();
 8000908:	f000 fe66 	bl	80015d8 <Error_Handler>
		if(SER_Status != SER_OK)
		{
			Error_Handler();
		}
	}
}
 800090c:	e0a4      	b.n	8000a58 <HAL_UART_RxCpltCallback+0x168>
    else if(huart == &huart2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a54      	ldr	r2, [pc, #336]	; (8000a64 <HAL_UART_RxCpltCallback+0x174>)
 8000912:	4293      	cmp	r3, r2
 8000914:	f040 80a0 	bne.w	8000a58 <HAL_UART_RxCpltCallback+0x168>
		if(RX_Status == SER_RX_EMPTY)   // Il dato ricevuto è un OpCode
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d14d      	bne.n	80009ba <HAL_UART_RxCpltCallback+0xca>
			if(OpCode_Buffer[0] == '*')
 800091e:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b2a      	cmp	r3, #42	; 0x2a
 8000926:	f040 8092 	bne.w	8000a4e <HAL_UART_RxCpltCallback+0x15e>
				if((OpCode_Buffer[1] == 'T') && (OpCode_Buffer[2] == 'T'))   					// TRIGGER TYPE OPCODE
 800092a:	4b4f      	ldr	r3, [pc, #316]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b54      	cmp	r3, #84	; 0x54
 8000932:	d112      	bne.n	800095a <HAL_UART_RxCpltCallback+0x6a>
 8000934:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b54      	cmp	r3, #84	; 0x54
 800093c:	d10d      	bne.n	800095a <HAL_UART_RxCpltCallback+0x6a>
					SER_Status = SER_SetRxState(SER_RX_OPCODE_TT);   							// Segnaliamo ricezione OpCode
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fe6c 	bl	800161c <SER_SetRxState>
 8000944:	60f8      	str	r0, [r7, #12]
					HAL_RXstatus = HAL_UART_Receive_IT(&huart2, (uint8_t *)TT, sizeof(TT)); 	// Avvio ricezione trigger type
 8000946:	2202      	movs	r2, #2
 8000948:	4948      	ldr	r1, [pc, #288]	; (8000a6c <HAL_UART_RxCpltCallback+0x17c>)
 800094a:	4846      	ldr	r0, [pc, #280]	; (8000a64 <HAL_UART_RxCpltCallback+0x174>)
 800094c:	f003 fc44 	bl	80041d8 <HAL_UART_Receive_IT>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <HAL_UART_RxCpltCallback+0x170>)
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e079      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
				else if((OpCode_Buffer[1] == 'T') && (OpCode_Buffer[2] == 'L'))   				// TRIGGER LEVEL OPCODE
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 800095c:	785b      	ldrb	r3, [r3, #1]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b54      	cmp	r3, #84	; 0x54
 8000962:	d112      	bne.n	800098a <HAL_UART_RxCpltCallback+0x9a>
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b4c      	cmp	r3, #76	; 0x4c
 800096c:	d10d      	bne.n	800098a <HAL_UART_RxCpltCallback+0x9a>
					SER_Status = SER_SetRxState(SER_RX_OPCODE_TL);   							// Segnaliamo ricezione OpCode
 800096e:	2002      	movs	r0, #2
 8000970:	f000 fe54 	bl	800161c <SER_SetRxState>
 8000974:	60f8      	str	r0, [r7, #12]
					HAL_RXstatus = HAL_UART_Receive_IT(&huart2, (uint8_t *)TL, sizeof(TL)); 	// Avvio ricezione trigger level
 8000976:	2202      	movs	r2, #2
 8000978:	493d      	ldr	r1, [pc, #244]	; (8000a70 <HAL_UART_RxCpltCallback+0x180>)
 800097a:	483a      	ldr	r0, [pc, #232]	; (8000a64 <HAL_UART_RxCpltCallback+0x174>)
 800097c:	f003 fc2c 	bl	80041d8 <HAL_UART_Receive_IT>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <HAL_UART_RxCpltCallback+0x170>)
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e061      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
				else if((OpCode_Buffer[1] == 'S') && (OpCode_Buffer[2] == 'P'))   				// SAMPLING PERIOD OPCODE
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 800098c:	785b      	ldrb	r3, [r3, #1]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b53      	cmp	r3, #83	; 0x53
 8000992:	d15c      	bne.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b50      	cmp	r3, #80	; 0x50
 800099c:	d157      	bne.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
					SER_Status = SER_SetRxState(SER_RX_OPCODE_SP);   							// Segnaliamo ricezione OpCode
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 fe3c 	bl	800161c <SER_SetRxState>
 80009a4:	60f8      	str	r0, [r7, #12]
					HAL_RXstatus = HAL_UART_Receive_IT(&huart2, (uint8_t *)SP, sizeof(SP)); 	// Avvio ricezione sampling period
 80009a6:	2205      	movs	r2, #5
 80009a8:	4932      	ldr	r1, [pc, #200]	; (8000a74 <HAL_UART_RxCpltCallback+0x184>)
 80009aa:	482e      	ldr	r0, [pc, #184]	; (8000a64 <HAL_UART_RxCpltCallback+0x174>)
 80009ac:	f003 fc14 	bl	80041d8 <HAL_UART_Receive_IT>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_UART_RxCpltCallback+0x170>)
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e049      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
		else if(RX_Status == SER_RX_TT || RX_Status == SER_RX_TL || RX_Status == SER_RX_SP) 	// OverRun
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d005      	beq.n	80009cc <HAL_UART_RxCpltCallback+0xdc>
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	d002      	beq.n	80009cc <HAL_UART_RxCpltCallback+0xdc>
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	d102      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0xe2>
			Error_Handler();
 80009cc:	f000 fe04 	bl	80015d8 <Error_Handler>
 80009d0:	e03d      	b.n	8000a4e <HAL_UART_RxCpltCallback+0x15e>
			if(RX_Status == SER_RX_OPCODE_TT)   				// IL DATO RICEVUTO È IL TRIGGER TYPE
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10e      	bne.n	80009f6 <HAL_UART_RxCpltCallback+0x106>
				if(TT[TT_DIMENSION] == '#')   					// dato valido
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <HAL_UART_RxCpltCallback+0x17c>)
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b23      	cmp	r3, #35	; 0x23
 80009e0:	d104      	bne.n	80009ec <HAL_UART_RxCpltCallback+0xfc>
					SER_Status = SER_SetRxState(SER_RX_TT);   	// segnaliamo la ricezione del TT
 80009e2:	2004      	movs	r0, #4
 80009e4:	f000 fe1a 	bl	800161c <SER_SetRxState>
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	e027      	b.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
					SER_Status = SER_SetRxState(SER_RX_EMPTY);	// il ricevitore rimane vuoto
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 fe15 	bl	800161c <SER_SetRxState>
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	e022      	b.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
			else if(RX_Status == SER_RX_OPCODE_TL)   			// IL DATO RICEVUTO È IL TRIGGER LEVEL
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d10e      	bne.n	8000a1a <HAL_UART_RxCpltCallback+0x12a>
				if(TL[TL_DIMENSION] == '#')   					// dato valido
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_RxCpltCallback+0x180>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b23      	cmp	r3, #35	; 0x23
 8000a04:	d104      	bne.n	8000a10 <HAL_UART_RxCpltCallback+0x120>
					SER_Status = SER_SetRxState(SER_RX_TL);  	// segnaliamo la ricezione del TL
 8000a06:	2005      	movs	r0, #5
 8000a08:	f000 fe08 	bl	800161c <SER_SetRxState>
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	e015      	b.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
					SER_Status = SER_SetRxState(SER_RX_EMPTY);  // il ricevitore rimane vuoto
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fe03 	bl	800161c <SER_SetRxState>
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	e010      	b.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
			else if(RX_Status == SER_RX_OPCODE_SP)   			// IL DATO RICEVUTO È IL SAMPLING PERIOD
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d10d      	bne.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
				if(SP[SP_DIMENSION] == '#')   					// dato valido
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_RxCpltCallback+0x184>)
 8000a22:	791b      	ldrb	r3, [r3, #4]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b23      	cmp	r3, #35	; 0x23
 8000a28:	d104      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0x144>
					SER_Status = SER_SetRxState(SER_RX_SP);   	// segnaliamo la ricezione del SP
 8000a2a:	2006      	movs	r0, #6
 8000a2c:	f000 fdf6 	bl	800161c <SER_SetRxState>
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	e003      	b.n	8000a3c <HAL_UART_RxCpltCallback+0x14c>
					SER_Status = SER_SetRxState(SER_RX_EMPTY);  // il ricevitore rimane vuoto
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 fdf1 	bl	800161c <SER_SetRxState>
 8000a3a:	60f8      	str	r0, [r7, #12]
			HAL_RXstatus = HAL_UART_Receive_IT(&huart2, (uint8_t *)OpCode_Buffer, sizeof(OpCode_Buffer));
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	490a      	ldr	r1, [pc, #40]	; (8000a68 <HAL_UART_RxCpltCallback+0x178>)
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_UART_RxCpltCallback+0x174>)
 8000a42:	f003 fbc9 	bl	80041d8 <HAL_UART_Receive_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_UART_RxCpltCallback+0x170>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		if(SER_Status != SER_OK)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_UART_RxCpltCallback+0x168>
			Error_Handler();
 8000a54:	f000 fdc0 	bl	80015d8 <Error_Handler>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000c68 	.word	0x20000c68
 8000a64:	20000d10 	.word	0x20000d10
 8000a68:	20000854 	.word	0x20000854
 8000a6c:	20000858 	.word	0x20000858
 8000a70:	2000085c 	.word	0x2000085c
 8000a74:	20000860 	.word	0x20000860

08000a78 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000a80:	f000 fdaa 	bl	80015d8 <Error_Handler>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	int activeBuffer, localError;
	if(hadc == &hadc1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a7c      	ldr	r2, [pc, #496]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	f040 80f0 	bne.w	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
	{
		activeBuffer = DE_GetActiveBuffer();
 8000a9e:	f000 faf1 	bl	8001084 <DE_GetActiveBuffer>
 8000aa2:	60f8      	str	r0, [r7, #12]
		// Salvataggio del valore campionato:
		if (activeBuffer == DE_ADCBUFFER1)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d109      	bne.n	8000abe <HAL_ADC_ConvCpltCallback+0x32>
		{
			adcBuffer1[adcRegularChannel_BufferIndex] = HAL_ADC_GetValue(&hadc1);
 8000aaa:	4877      	ldr	r0, [pc, #476]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000aac:	f001 fa05 	bl	8001eba <HAL_ADC_GetValue>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	4b76      	ldr	r3, [pc, #472]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2d1      	uxtb	r1, r2
 8000ab8:	4a75      	ldr	r2, [pc, #468]	; (8000c90 <HAL_ADC_ConvCpltCallback+0x204>)
 8000aba:	54d1      	strb	r1, [r2, r3]
 8000abc:	e008      	b.n	8000ad0 <HAL_ADC_ConvCpltCallback+0x44>
		}
		else
		{
			adcBuffer2[adcRegularChannel_BufferIndex] = HAL_ADC_GetValue(&hadc1);
 8000abe:	4872      	ldr	r0, [pc, #456]	; (8000c88 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000ac0:	f001 f9fb 	bl	8001eba <HAL_ADC_GetValue>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b71      	ldr	r3, [pc, #452]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b2d1      	uxtb	r1, r2
 8000acc:	4a71      	ldr	r2, [pc, #452]	; (8000c94 <HAL_ADC_ConvCpltCallback+0x208>)
 8000ace:	54d1      	strb	r1, [r2, r3]
		}
		// Elaborazione valore campionato:
		if (DE_GetSystemStatus() == DE_TRIGGERENABLED)    							// IL SISTEMA È SENSIBILE AI TRIGGER
 8000ad0:	f000 fa4c 	bl	8000f6c <DE_GetSystemStatus>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f040 8082 	bne.w	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
		{
			missingSamples --;
 8000adc:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a6d      	ldr	r2, [pc, #436]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000ae4:	6013      	str	r3, [r2, #0]
			if (DE_GetTriggerStatus() == DE_DETECTED)    							// IL TRIGGER È GIÀ STATO RILEVATO
 8000ae6:	f000 fa59 	bl	8000f9c <DE_GetTriggerStatus>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d152      	bne.n	8000b96 <HAL_ADC_ConvCpltCallback+0x10a>
			{
				if((DE_GetBufferStatus(DE_ADCBUFFER1) == DE_EMPTYBUFFER) && (DE_GetBufferStatus(DE_ADCBUFFER2) == DE_EMPTYBUFFER))
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 fa8b 	bl	800100c <DE_GetBufferStatus>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d149      	bne.n	8000b90 <HAL_ADC_ConvCpltCallback+0x104>
 8000afc:	2002      	movs	r0, #2
 8000afe:	f000 fa85 	bl	800100c <DE_GetBufferStatus>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d143      	bne.n	8000b90 <HAL_ADC_ConvCpltCallback+0x104>
				{
					if (missingSamples == 0)										// buffer valido
 8000b08:	4b63      	ldr	r3, [pc, #396]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d167      	bne.n	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
					{
						DE_SystemDisable();    										// disabilita il sistema ad essere sensibile ai trigger
 8000b10:	f000 fa20 	bl	8000f54 <DE_SystemDisable>
						// Segnala disponibiltà di un nuovo blocco:
						if(activeBuffer == DE_ADCBUFFER1)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d118      	bne.n	8000b4c <HAL_ADC_ConvCpltCallback+0xc0>
						{
							localError = DE_SetBufferAsFull(DE_ADCBUFFER1);						// segnala che il buffer1 è pronto
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fa56 	bl	8000fcc <DE_SetBufferAsFull>
 8000b20:	60b8      	str	r0, [r7, #8]
							localError = localError + DE_SetActiveBuffer(DE_ADCBUFFER2);		// imposta il buffer2 per i prossimi campionamenti
 8000b22:	2002      	movs	r0, #2
 8000b24:	f000 faba 	bl	800109c <DE_SetActiveBuffer>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
							localError = localError + DE_SetBlockStatus(DE_STARTBLOCK, DE_ADCBUFFER2);		// Quando un buffer viene attivato, blockStatus viene impostato a STARTBLOCK
 8000b30:	2102      	movs	r1, #2
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 faca 	bl	80010cc <DE_SetBlockStatus>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
							if(localError != DE_OK)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01a      	beq.n	8000b7c <HAL_ADC_ConvCpltCallback+0xf0>
							{
								Error_Handler();
 8000b46:	f000 fd47 	bl	80015d8 <Error_Handler>
 8000b4a:	e017      	b.n	8000b7c <HAL_ADC_ConvCpltCallback+0xf0>
							}
						}
						else
						{
							localError = DE_SetBufferAsFull(DE_ADCBUFFER2);						// segnala che il buffer1 è pronto
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f000 fa3d 	bl	8000fcc <DE_SetBufferAsFull>
 8000b52:	60b8      	str	r0, [r7, #8]
							localError = localError + DE_SetActiveBuffer(DE_ADCBUFFER1);		// imposta il buffer2 per i prossimi campionamenti
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 faa1 	bl	800109c <DE_SetActiveBuffer>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60bb      	str	r3, [r7, #8]
							localError = localError + DE_SetBlockStatus(DE_STARTBLOCK, DE_ADCBUFFER1);		// Quando un buffer viene attivato, blockStatus viene impostato a STARTBLOCK
 8000b62:	2101      	movs	r1, #1
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fab1 	bl	80010cc <DE_SetBlockStatus>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
							if(localError != DE_OK)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_ADC_ConvCpltCallback+0xf0>
							{
								Error_Handler();
 8000b78:	f000 fd2e 	bl	80015d8 <Error_Handler>
							}
						}
						adcRegularChannel_BufferIndex = 1;
 8000b7c:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
						// Prepariamo il sistema per quando sarà nuovamente abilitato a sentire i trigger:
						missingSamples = BUFFER_DIMENSION - 2;
 8000b82:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000b84:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000b88:	601a      	str	r2, [r3, #0]
						DE_SetTriggerAsUndetected();
 8000b8a:	f000 fa13 	bl	8000fb4 <DE_SetTriggerAsUndetected>
					if (missingSamples == 0)										// buffer valido
 8000b8e:	e027      	b.n	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
					}
				}
				else
				{
					Error_Handler();
 8000b90:	f000 fd22 	bl	80015d8 <Error_Handler>
 8000b94:	e024      	b.n	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
				}
			}
			else    // IL TRIGGER NON È ANCORA STATO RILEVATO
			{
				if (isTrigger(adcRegularChannel_BufferIndex) == TRUE || (mode == AUTO && missingSamples <= (((BUFFER_DIMENSION - 2) / 2) - 1)))
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f954 	bl	8000e48 <isTrigger>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d008      	beq.n	8000bb8 <HAL_ADC_ConvCpltCallback+0x12c>
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <HAL_ADC_ConvCpltCallback+0x210>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d110      	bne.n	8000bd0 <HAL_ADC_ConvCpltCallback+0x144>
 8000bae:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000bb6:	dc0b      	bgt.n	8000bd0 <HAL_ADC_ConvCpltCallback+0x144>
				{
					// Il campione è il trigger, oppure siamo in AUTO e abbiamo acquisito metà campioni senza trovare il trigger
					DE_SetTriggerAsDetected();    							// segnala acquisizione trigger
 8000bb8:	f000 f9e4 	bl	8000f84 <DE_SetTriggerAsDetected>
					triggerPosition = adcRegularChannel_BufferIndex;		// memorizza posizione trigger
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_ADC_ConvCpltCallback+0x214>)
 8000bc4:	601a      	str	r2, [r3, #0]
					missingSamples = (((BUFFER_DIMENSION - 2) / 2) - 1);
 8000bc6:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000bc8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
				}
				else
				{
					if (missingSamples <= 0)
 8000bd0:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dc03      	bgt.n	8000be0 <HAL_ADC_ConvCpltCallback+0x154>
					{
						missingSamples = BUFFER_DIMENSION - 2;
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <HAL_ADC_ConvCpltCallback+0x20c>)
 8000bda:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000bde:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		// Aggiornamento indice:
		adcRegularChannel_BufferIndex = adcRegularChannel_BufferIndex + 2;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3302      	adds	r3, #2
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000be8:	6013      	str	r3, [r2, #0]
		if (adcRegularChannel_BufferIndex > BUFFER_DIMENSION - 3)
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d943      	bls.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
		{
			adcRegularChannel_BufferIndex = 1;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <HAL_ADC_ConvCpltCallback+0x200>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
			// Il sistema inizia ad essere sensibile ai trigger solo dopo aver aquisito 1022 campioni dall'accensione
			if((DE_GetActiveBuffer() == DE_ADCBUFFER1) && (DE_GetBlockStatus(DE_ADCBUFFER1) == DE_INITIALBLOCK))
 8000bfc:	f000 fa42 	bl	8001084 <DE_GetActiveBuffer>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d111      	bne.n	8000c2a <HAL_ADC_ConvCpltCallback+0x19e>
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fa8c 	bl	8001124 <DE_GetBlockStatus>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10b      	bne.n	8000c2a <HAL_ADC_ConvCpltCallback+0x19e>
			{
				if(DE_SetBlockStatus(DE_STARTBLOCK, DE_ADCBUFFER1) == DE_ERROR)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 fa59 	bl	80010cc <DE_SetBlockStatus>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d101      	bne.n	8000c24 <HAL_ADC_ConvCpltCallback+0x198>
				{
					Error_Handler();
 8000c20:	f000 fcda 	bl	80015d8 <Error_Handler>
				}
				DE_SystemEnable();
 8000c24:	f000 f98a 	bl	8000f3c <DE_SystemEnable>
 8000c28:	e029      	b.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
			}
			// Quando un buffer viene attivato, blockStatus viene impostato a STARTBLOCK
			// Quando il buffer viene riempito la prima volta dopo l'attivazione, blockStatus diventa FOLLOWINGBLOCK
			else if((DE_GetActiveBuffer() == DE_ADCBUFFER1) && (DE_GetBlockStatus(DE_ADCBUFFER1) == DE_STARTBLOCK))
 8000c2a:	f000 fa2b 	bl	8001084 <DE_GetActiveBuffer>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10f      	bne.n	8000c54 <HAL_ADC_ConvCpltCallback+0x1c8>
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fa75 	bl	8001124 <DE_GetBlockStatus>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d109      	bne.n	8000c54 <HAL_ADC_ConvCpltCallback+0x1c8>
			{
				if(DE_SetBlockStatus(DE_FOLLOWINGBLOCK, DE_ADCBUFFER1) == DE_ERROR)
 8000c40:	2101      	movs	r1, #1
 8000c42:	2002      	movs	r0, #2
 8000c44:	f000 fa42 	bl	80010cc <DE_SetBlockStatus>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d117      	bne.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
				{
					Error_Handler();
 8000c4e:	f000 fcc3 	bl	80015d8 <Error_Handler>
				if(DE_SetBlockStatus(DE_FOLLOWINGBLOCK, DE_ADCBUFFER1) == DE_ERROR)
 8000c52:	e014      	b.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
				}
			}
			else if((DE_GetActiveBuffer() == DE_ADCBUFFER2) && (DE_GetBlockStatus(DE_ADCBUFFER2) == DE_STARTBLOCK))
 8000c54:	f000 fa16 	bl	8001084 <DE_GetActiveBuffer>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d10f      	bne.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f000 fa60 	bl	8001124 <DE_GetBlockStatus>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d109      	bne.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
			{
				if(DE_SetBlockStatus(DE_FOLLOWINGBLOCK, DE_ADCBUFFER2) == DE_ERROR)
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 fa2d 	bl	80010cc <DE_SetBlockStatus>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d102      	bne.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
				{
					Error_Handler();
 8000c78:	f000 fcae 	bl	80015d8 <Error_Handler>
				}
			}
		}
	}
}
 8000c7c:	e7ff      	b.n	8000c7e <HAL_ADC_ConvCpltCallback+0x1f2>
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000cc8 	.word	0x20000cc8
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	20000054 	.word	0x20000054
 8000c94:	20000454 	.word	0x20000454
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	2000004c 	.word	0x2000004c
 8000ca0:	20000050 	.word	0x20000050

08000ca4 <HAL_ADCEx_InjectedConvCpltCallback>:



void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	int activeBuffer, localError;
	if (hadc == &hadc1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f040 80ad 	bne.w	8000e10 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>
	{
		activeBuffer = DE_GetActiveBuffer();
 8000cb6:	f000 f9e5 	bl	8001084 <DE_GetActiveBuffer>
 8000cba:	60f8      	str	r0, [r7, #12]
		// Salvataggio del valore campionato:
		if (activeBuffer == DE_ADCBUFFER1)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_ADCEx_InjectedConvCpltCallback+0x34>
		{
			adcBuffer1[adcInjectedChannel_BufferIndex] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4854      	ldr	r0, [pc, #336]	; (8000e18 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8000cc6:	f001 fbf3 	bl	80024b0 <HAL_ADCEx_InjectedGetValue>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b2d1      	uxtb	r1, r2
 8000cd2:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <HAL_ADCEx_InjectedConvCpltCallback+0x17c>)
 8000cd4:	54d1      	strb	r1, [r2, r3]
 8000cd6:	e009      	b.n	8000cec <HAL_ADCEx_InjectedConvCpltCallback+0x48>
		}
		else
		{
			adcBuffer2[adcInjectedChannel_BufferIndex] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	484f      	ldr	r0, [pc, #316]	; (8000e18 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8000cdc:	f001 fbe8 	bl	80024b0 <HAL_ADCEx_InjectedGetValue>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4b4e      	ldr	r3, [pc, #312]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b2d1      	uxtb	r1, r2
 8000ce8:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <HAL_ADCEx_InjectedConvCpltCallback+0x180>)
 8000cea:	54d1      	strb	r1, [r2, r3]
		}
		// Elaborazione del valore campionato:
		if (DE_GetSystemStatus() == DE_TRIGGERENABLED)    					// IL SISTEMA È SENSIBILE AI TRIGGER
 8000cec:	f000 f93e 	bl	8000f6c <DE_GetSystemStatus>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d17e      	bne.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
		{
			missingSamples --;   		 									// decremento del numero di campioni rimanenti da acquisire dal CH0
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a4a      	ldr	r2, [pc, #296]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000cfe:	6013      	str	r3, [r2, #0]
			if (DE_GetTriggerStatus() == DE_DETECTED)    					// IL TRIGGER È GIÀ STATO RILEVATO
 8000d00:	f000 f94c 	bl	8000f9c <DE_GetTriggerStatus>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d14f      	bne.n	8000daa <HAL_ADCEx_InjectedConvCpltCallback+0x106>
			{
				if ((DE_GetBufferStatus(DE_ADCBUFFER1) == DE_EMPTYBUFFER) && (DE_GetBufferStatus(DE_ADCBUFFER2) == DE_EMPTYBUFFER))
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 f97e 	bl	800100c <DE_GetBufferStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d16e      	bne.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
 8000d16:	2002      	movs	r0, #2
 8000d18:	f000 f978 	bl	800100c <DE_GetBufferStatus>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d168      	bne.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
				{
					if (missingSamples <= 0)								// buffer valido
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	dc64      	bgt.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
					{
						DE_SystemDisable();    								// disabilita il sistema ad essere sensibile ai trigger
 8000d2a:	f000 f913 	bl	8000f54 <DE_SystemDisable>
						// Segnala disponibiltà di un nuovo blocco:
						if(activeBuffer == DE_ADCBUFFER1)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d118      	bne.n	8000d66 <HAL_ADCEx_InjectedConvCpltCallback+0xc2>
						{
							localError = DE_SetBufferAsFull(DE_ADCBUFFER1);						// segnala che il buffer1 è pronto
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 f949 	bl	8000fcc <DE_SetBufferAsFull>
 8000d3a:	60b8      	str	r0, [r7, #8]
							localError = localError + DE_SetActiveBuffer(DE_ADCBUFFER2);		// imposta il buffer2 per i prossimi campionamenti
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 f9ad 	bl	800109c <DE_SetActiveBuffer>
 8000d42:	4602      	mov	r2, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4413      	add	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
							localError = localError + DE_SetBlockStatus(DE_STARTBLOCK, DE_ADCBUFFER2);		// Quando un buffer viene attivato, blockStatus viene impostato a STARTBLOCK
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 f9bd 	bl	80010cc <DE_SetBlockStatus>
 8000d52:	4602      	mov	r2, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4413      	add	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
							if(localError != DE_OK)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d01a      	beq.n	8000d96 <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
							{
								Error_Handler();
 8000d60:	f000 fc3a 	bl	80015d8 <Error_Handler>
 8000d64:	e017      	b.n	8000d96 <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
							}
						}
						else
						{
							localError = DE_SetBufferAsFull(DE_ADCBUFFER2);						// segnala che il buffer1 è pronto
 8000d66:	2002      	movs	r0, #2
 8000d68:	f000 f930 	bl	8000fcc <DE_SetBufferAsFull>
 8000d6c:	60b8      	str	r0, [r7, #8]
							localError = localError + DE_SetActiveBuffer(DE_ADCBUFFER1);		// imposta il buffer2 per i prossimi campionamenti
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 f994 	bl	800109c <DE_SetActiveBuffer>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4413      	add	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
							localError = localError + DE_SetBlockStatus(DE_STARTBLOCK, DE_ADCBUFFER1);		// Quando un buffer viene attivato, blockStatus viene impostato a STARTBLOCK
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 f9a4 	bl	80010cc <DE_SetBlockStatus>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	4413      	add	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
							if(localError != DE_OK)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_ADCEx_InjectedConvCpltCallback+0xf2>
							{
								Error_Handler();
 8000d92:	f000 fc21 	bl	80015d8 <Error_Handler>
							}
						}
						adcInjectedChannel_BufferIndex = 2;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
						// Prepariamo il sistema per quando sarà nuovamente abilitato a sentire i trigger:
						missingSamples = BUFFER_DIMENSION - 2;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000d9e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000da2:	601a      	str	r2, [r3, #0]
						DE_SetTriggerAsUndetected();
 8000da4:	f000 f906 	bl	8000fb4 <DE_SetTriggerAsUndetected>
 8000da8:	e024      	b.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
					}
				}
			}
			else    // IL TRIGGER NON È ANCORA STATO RILEVATO
			{
				if (isTrigger(adcInjectedChannel_BufferIndex) == TRUE || (mode == AUTO && missingSamples <= (((BUFFER_DIMENSION - 2) / 2) - 1)))
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f84a 	bl	8000e48 <isTrigger>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d008      	beq.n	8000dcc <HAL_ADCEx_InjectedConvCpltCallback+0x128>
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_ADCEx_InjectedConvCpltCallback+0x188>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d110      	bne.n	8000de4 <HAL_ADCEx_InjectedConvCpltCallback+0x140>
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000dca:	dc0b      	bgt.n	8000de4 <HAL_ADCEx_InjectedConvCpltCallback+0x140>
				{
					// Il campione è il trigger, oppure siamo in AUTO e abbiamo acquisito metà campioni senza trovare il trigger
					DE_SetTriggerAsDetected();    							// segnala acquisizione trigger
 8000dcc:	f000 f8da 	bl	8000f84 <DE_SetTriggerAsDetected>
					triggerPosition = adcInjectedChannel_BufferIndex;		// memorizza posizione trigger
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_ADCEx_InjectedConvCpltCallback+0x18c>)
 8000dd8:	601a      	str	r2, [r3, #0]
					missingSamples = (((BUFFER_DIMENSION - 2) / 2) - 1);	// il numero di campioni da acquisire dopop il trigger è noto
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000ddc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
				}
				else
				{
					if (missingSamples <= 0)
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dc03      	bgt.n	8000df4 <HAL_ADCEx_InjectedConvCpltCallback+0x150>
					{
						missingSamples = BUFFER_DIMENSION - 2;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_ADCEx_InjectedConvCpltCallback+0x184>)
 8000dee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000df2:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		// Aggiornamento indice:
		adcInjectedChannel_BufferIndex = adcInjectedChannel_BufferIndex + 2;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3302      	adds	r3, #2
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000dfc:	6013      	str	r3, [r2, #0]
		if (adcInjectedChannel_BufferIndex > BUFFER_DIMENSION - 2)
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d902      	bls.n	8000e10 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>
		{
			adcInjectedChannel_BufferIndex = 2;
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_ADCEx_InjectedConvCpltCallback+0x178>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000cc8 	.word	0x20000cc8
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000054 	.word	0x20000054
 8000e24:	20000454 	.word	0x20000454
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	2000004c 	.word	0x2000004c
 8000e30:	20000050 	.word	0x20000050

08000e34 <HAL_ADC_ErrorCallback>:



void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000e3c:	f000 fbcc 	bl	80015d8 <Error_Handler>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <isTrigger>:



static int isTrigger(int index)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	// Confrontiamo il valore attuale con quello precedente
	if(DE_GetActiveBuffer() == DE_ADCBUFFER1)
 8000e50:	f000 f918 	bl	8001084 <DE_GetActiveBuffer>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d133      	bne.n	8000ec2 <isTrigger+0x7a>
	{
		// Per gli indici 1 e 2 il valore precedente si trova alla fine del buffer
		if((index > 2))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	dd17      	ble.n	8000e90 <isTrigger+0x48>
		{
			if((adcBuffer1[index] >= triggerLevel) && (adcBuffer1[index - 2] < triggerLevel))
 8000e60:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <isTrigger+0xe8>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <isTrigger+0xec>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	db0b      	blt.n	8000e8c <isTrigger+0x44>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <isTrigger+0xe8>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <isTrigger+0xec>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	da01      	bge.n	8000e8c <isTrigger+0x44>
			{
				return TRUE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e04d      	b.n	8000f28 <isTrigger+0xe0>
			}
			else
			{
				return FALSE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e04b      	b.n	8000f28 <isTrigger+0xe0>
			}
		}
		else
		{
			if((adcBuffer1[index] >= triggerLevel) && (adcBuffer1[BUFFER_DIMENSION - 4 + index] < triggerLevel))
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <isTrigger+0xe8>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <isTrigger+0xec>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	db0c      	blt.n	8000ebe <isTrigger+0x76>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <isTrigger+0xe8>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <isTrigger+0xec>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	da01      	bge.n	8000ebe <isTrigger+0x76>
			{
				return TRUE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e034      	b.n	8000f28 <isTrigger+0xe0>
			}
			else
			{
				return FALSE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e032      	b.n	8000f28 <isTrigger+0xe0>
			}
		}
	}
	else
	{
		if((index > 2))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	dd17      	ble.n	8000ef8 <isTrigger+0xb0>
		{
			if((adcBuffer2[index] >= triggerLevel) && (adcBuffer2[index - 2] < triggerLevel))
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <isTrigger+0xf0>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <isTrigger+0xec>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	db0b      	blt.n	8000ef4 <isTrigger+0xac>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <isTrigger+0xf0>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <isTrigger+0xec>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	da01      	bge.n	8000ef4 <isTrigger+0xac>
			{
				return TRUE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e019      	b.n	8000f28 <isTrigger+0xe0>
			}
			else
			{
				return FALSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e017      	b.n	8000f28 <isTrigger+0xe0>
			}
		}
		else
		{
			if((adcBuffer2[index] >= triggerLevel) && (adcBuffer2[BUFFER_DIMENSION - 4 + index] < triggerLevel))
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <isTrigger+0xf0>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <isTrigger+0xec>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	db0c      	blt.n	8000f26 <isTrigger+0xde>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <isTrigger+0xf0>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <isTrigger+0xec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	da01      	bge.n	8000f26 <isTrigger+0xde>
			{
				return TRUE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <isTrigger+0xe0>
			}
			else
			{
				return FALSE;
 8000f26:	2301      	movs	r3, #1
			}
		}
	}
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000054 	.word	0x20000054
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000454 	.word	0x20000454

08000f3c <DE_SystemEnable>:
static volatile int buffer1_blockStatus = DE_INITIALBLOCK;
static volatile int buffer2_blockStatus = DE_STARTBLOCK;


void DE_SystemEnable()
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	enabling_flag = DE_TRIGGERENABLED;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <DE_SystemEnable+0x14>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000c70 	.word	0x20000c70

08000f54 <DE_SystemDisable>:


void DE_SystemDisable()
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	enabling_flag = DE_TRIGGERDISABLED;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <DE_SystemDisable+0x14>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000c70 	.word	0x20000c70

08000f6c <DE_GetSystemStatus>:


int DE_GetSystemStatus()
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	return enabling_flag;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <DE_GetSystemStatus+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000c70 	.word	0x20000c70

08000f84 <DE_SetTriggerAsDetected>:


void DE_SetTriggerAsDetected()
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	trigger_flag = DE_DETECTED;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <DE_SetTriggerAsDetected+0x14>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000c74 	.word	0x20000c74

08000f9c <DE_GetTriggerStatus>:


int DE_GetTriggerStatus()
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	return trigger_flag;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <DE_GetTriggerStatus+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000c74 	.word	0x20000c74

08000fb4 <DE_SetTriggerAsUndetected>:


void DE_SetTriggerAsUndetected()
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	trigger_flag = DE_UNDETECTED;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <DE_SetTriggerAsUndetected+0x14>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000c74 	.word	0x20000c74

08000fcc <DE_SetBufferAsFull>:


int DE_SetBufferAsFull(int buffer)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	if(buffer == DE_ADCBUFFER1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d104      	bne.n	8000fe4 <DE_SetBufferAsFull+0x18>
	{
		mainBuffer1_flag = DE_FULLBUFFER;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <DE_SetBufferAsFull+0x38>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
		return DE_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e008      	b.n	8000ff6 <DE_SetBufferAsFull+0x2a>
	}
	else if (buffer == DE_ADCBUFFER2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d104      	bne.n	8000ff4 <DE_SetBufferAsFull+0x28>
	{
		mainBuffer2_flag = DE_FULLBUFFER;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <DE_SetBufferAsFull+0x3c>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
		return DE_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e000      	b.n	8000ff6 <DE_SetBufferAsFull+0x2a>
	}
	else
	{
		return DE_ERROR;
 8000ff4:	2303      	movs	r3, #3
	}
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000c78 	.word	0x20000c78
 8001008:	20000c7c 	.word	0x20000c7c

0800100c <DE_GetBufferStatus>:


int DE_GetBufferStatus(int buffer)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if(buffer == DE_ADCBUFFER1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <DE_GetBufferStatus+0x14>
	{
		return mainBuffer1_flag;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <DE_GetBufferStatus+0x30>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	e006      	b.n	800102e <DE_GetBufferStatus+0x22>
	}
	else if (buffer == DE_ADCBUFFER2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d102      	bne.n	800102c <DE_GetBufferStatus+0x20>
	{
		return mainBuffer2_flag;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <DE_GetBufferStatus+0x34>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e000      	b.n	800102e <DE_GetBufferStatus+0x22>
	}
	else
	{
		return DE_ERROR;
 800102c:	2303      	movs	r3, #3
	}
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000c78 	.word	0x20000c78
 8001040:	20000c7c 	.word	0x20000c7c

08001044 <DE_SetBufferAsEmpty>:


int DE_SetBufferAsEmpty(int buffer)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	if(buffer == DE_ADCBUFFER1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d104      	bne.n	800105c <DE_SetBufferAsEmpty+0x18>
	{
		mainBuffer1_flag = DE_EMPTYBUFFER;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <DE_SetBufferAsEmpty+0x38>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
		return DE_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e008      	b.n	800106e <DE_SetBufferAsEmpty+0x2a>
	}
	else if (buffer == DE_ADCBUFFER2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d104      	bne.n	800106c <DE_SetBufferAsEmpty+0x28>
	{
		mainBuffer2_flag = DE_EMPTYBUFFER;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DE_SetBufferAsEmpty+0x3c>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		return DE_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	e000      	b.n	800106e <DE_SetBufferAsEmpty+0x2a>
	}
	else
	{
		return DE_ERROR;
 800106c:	2303      	movs	r3, #3
	}
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000c78 	.word	0x20000c78
 8001080:	20000c7c 	.word	0x20000c7c

08001084 <DE_GetActiveBuffer>:


int DE_GetActiveBuffer()
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	return activeBuff;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <DE_GetActiveBuffer+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000010 	.word	0x20000010

0800109c <DE_SetActiveBuffer>:


int DE_SetActiveBuffer(int buffer)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	if((buffer == DE_ADCBUFFER1) || (buffer == DE_ADCBUFFER2))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d002      	beq.n	80010b0 <DE_SetActiveBuffer+0x14>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d104      	bne.n	80010ba <DE_SetActiveBuffer+0x1e>
	{
		activeBuff = buffer;
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <DE_SetActiveBuffer+0x2c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
		return DE_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <DE_SetActiveBuffer+0x20>
	}
	else
	{
		return DE_ERROR;
 80010ba:	2303      	movs	r3, #3
	}
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000010 	.word	0x20000010

080010cc <DE_SetBlockStatus>:


int DE_SetBlockStatus(int state, int buffer)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	if(state == DE_INITIALBLOCK || state == DE_STARTBLOCK || state == DE_FOLLOWINGBLOCK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <DE_SetBlockStatus+0x1c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d002      	beq.n	80010e8 <DE_SetBlockStatus+0x1c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d111      	bne.n	800110c <DE_SetBlockStatus+0x40>
	{
		if(buffer == DE_ADCBUFFER1)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d104      	bne.n	80010f8 <DE_SetBlockStatus+0x2c>
		{
			buffer1_blockStatus = state;
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <DE_SetBlockStatus+0x50>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6013      	str	r3, [r2, #0]
			return DE_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e00a      	b.n	800110e <DE_SetBlockStatus+0x42>
		}
		else if(buffer == DE_ADCBUFFER2)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d104      	bne.n	8001108 <DE_SetBlockStatus+0x3c>
		{
			buffer2_blockStatus = state;
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <DE_SetBlockStatus+0x54>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6013      	str	r3, [r2, #0]
			return DE_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e002      	b.n	800110e <DE_SetBlockStatus+0x42>
		}
		else
		{
			return DE_ERROR;
 8001108:	2303      	movs	r3, #3
 800110a:	e000      	b.n	800110e <DE_SetBlockStatus+0x42>
		}
	}
	else
	{
		return DE_ERROR;
 800110c:	2303      	movs	r3, #3
	}
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000c80 	.word	0x20000c80
 8001120:	20000014 	.word	0x20000014

08001124 <DE_GetBlockStatus>:


int DE_GetBlockStatus(int buffer)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if(buffer == DE_ADCBUFFER1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d102      	bne.n	8001138 <DE_GetBlockStatus+0x14>
	{
		return buffer1_blockStatus;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <DE_GetBlockStatus+0x30>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	e006      	b.n	8001146 <DE_GetBlockStatus+0x22>
	}
	else if(buffer == DE_ADCBUFFER2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d102      	bne.n	8001144 <DE_GetBlockStatus+0x20>
	{
		return buffer2_blockStatus;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <DE_GetBlockStatus+0x34>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e000      	b.n	8001146 <DE_GetBlockStatus+0x22>
	}
	else
	{
		return DE_ERROR;
 8001144:	2303      	movs	r3, #3
	}
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000c80 	.word	0x20000c80
 8001158:	20000014 	.word	0x20000014

0800115c <DO_BufferLeftShift>:

// I valori in posizione '0' e in posizione 'dimension' NON VENGONO TOCCATI, in quanto contengono i caratteri che delimitano il frame


void DO_BufferLeftShift(uint8_t *buffer, int dimension)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
	int box = buffer[1];						// salviamo il primo campione in una variabile temporanea
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	60bb      	str	r3, [r7, #8]
	for (i = 2; i < dimension - 1; i++)
 8001172:	2302      	movs	r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e00b      	b.n	8001190 <DO_BufferLeftShift+0x34>
	{
		buffer[i-1] = buffer[i];				// spostiamo ogni campione a sinistra di una posizione, partendo dall'inizio
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	441a      	add	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b01      	subs	r3, #1
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	440b      	add	r3, r1
 8001186:	7812      	ldrb	r2, [r2, #0]
 8001188:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < dimension - 1; i++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	dbee      	blt.n	8001178 <DO_BufferLeftShift+0x1c>
	}
	buffer[dimension - 2] = box;				// salviamo il primo campione in ultima posizione
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3b02      	subs	r3, #2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DO_BufferRightShift>:


void DO_BufferRightShift(uint8_t *buffer, int dimension)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	int j = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
	int box = buffer[dimension - 2];			// salviamo l'ultimo campione in una variabile temporanea
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3b02      	subs	r3, #2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	60bb      	str	r3, [r7, #8]
	for(j = (dimension - 3); j > 0; j--)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e00b      	b.n	80011ee <DO_BufferRightShift+0x3a>
	{
		buffer[j+1] = buffer[j];				// spostiamo ogni campione a destra di una posizione, partendo dal fondo
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	441a      	add	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	440b      	add	r3, r1
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
	for(j = (dimension - 3); j > 0; j--)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dcf0      	bgt.n	80011d6 <DO_BufferRightShift+0x22>
	}
	buffer[1] = box;							// salviamo l'ultimo campione in prima posizione
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fbac 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f82a 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f9ac 	bl	8001574 <MX_GPIO_Init>
  MX_ADC1_Init();
 800121c:	f000 f892 	bl	8001344 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001220:	f000 f90a 	bl	8001438 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001224:	f000 f97c 	bl	8001520 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)    // Accensione ADC
 8001228:	480e      	ldr	r0, [pc, #56]	; (8001264 <main+0x58>)
 800122a:	f000 fc55 	bl	8001ad8 <HAL_ADC_Start_IT>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <main+0x2c>
  {
 	Error_Handler();
 8001234:	f000 f9d0 	bl	80015d8 <Error_Handler>
  }
  if (HAL_ADCEx_InjectedStart_IT(&hadc1) != HAL_OK)    // Accensione ADC injected mode
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <main+0x58>)
 800123a:	f001 f873 	bl	8002324 <HAL_ADCEx_InjectedStart_IT>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <main+0x3c>
  {
   	Error_Handler();
 8001244:	f000 f9c8 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)    // Accensione TIMER
 8001248:	2100      	movs	r1, #0
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <main+0x5c>)
 800124c:	f002 fa68 	bl	8003720 <HAL_TIM_OC_Start_IT>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <main+0x4e>
  {
    Error_Handler();
 8001256:	f000 f9bf 	bl	80015d8 <Error_Handler>
  }
  DSO_StartRX();   // Inizio ricezione comandi da seriale
 800125a:	f7ff faf9 	bl	8000850 <DSO_StartRX>

  while (1)
  {
	DSO_UserCode();
 800125e:	f7ff f939 	bl	80004d4 <DSO_UserCode>
 8001262:	e7fc      	b.n	800125e <main+0x52>
 8001264:	20000cc8 	.word	0x20000cc8
 8001268:	20000c88 	.word	0x20000c88

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	; 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	; 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fdc4 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <SystemClock_Config+0xd0>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a28      	ldr	r2, [pc, #160]	; (800133c <SystemClock_Config+0xd0>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <SystemClock_Config+0xd0>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <SystemClock_Config+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd4>)
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e0:	2310      	movs	r3, #16
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fd76 	bl	8002de8 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001302:	f000 f969 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2102      	movs	r1, #2
 8001322:	4618      	mov	r0, r3
 8001324:	f001 ffd0 	bl	80032c8 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800132e:	f000 f953 	bl	80015d8 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fd52 	bl	8004e08 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <MX_ADC1_Init+0xe8>)
 8001366:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_ADC1_Init+0xec>)
 8001368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_ADC1_Init+0xe8>)
 800136c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_ADC1_Init+0xe8>)
 8001374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001378:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_ADC1_Init+0xe8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_ADC1_Init+0xe8>)
 8001382:	2200      	movs	r2, #0
 8001384:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_ADC1_Init+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_ADC1_Init+0xe8>)
 8001390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_ADC1_Init+0xe8>)
 8001398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_ADC1_Init+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_ADC1_Init+0xe8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_ADC1_Init+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_ADC1_Init+0xe8>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	481c      	ldr	r0, [pc, #112]	; (800142c <MX_ADC1_Init+0xe8>)
 80013ba:	f000 fb49 	bl	8001a50 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 f908 	bl	80015d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_ADC1_Init+0xe8>)
 80013dc:	f000 fd84 	bl	8001ee8 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80013e6:	f000 f8f7 	bl	80015d8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_ADC1_Init+0xf0>)
 8001400:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8001402:	2301      	movs	r3, #1
 8001404:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_ADC1_Init+0xe8>)
 8001414:	f001 f884 	bl	8002520 <HAL_ADCEx_InjectedConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800141e:	f000 f8db 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3730      	adds	r7, #48	; 0x30
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000cc8 	.word	0x20000cc8
 8001430:	40012000 	.word	0x40012000
 8001434:	000f0001 	.word	0x000f0001

08001438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_TIM3_Init+0xe0>)
 800146a:	4a2c      	ldr	r2, [pc, #176]	; (800151c <MX_TIM3_Init+0xe4>)
 800146c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_TIM3_Init+0xe0>)
 8001470:	22a8      	movs	r2, #168	; 0xa8
 8001472:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <MX_TIM3_Init+0xe0>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_TIM3_Init+0xe0>)
 800147c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001480:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <MX_TIM3_Init+0xe0>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_TIM3_Init+0xe0>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148e:	4822      	ldr	r0, [pc, #136]	; (8001518 <MX_TIM3_Init+0xe0>)
 8001490:	f002 f8e6 	bl	8003660 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800149a:	f000 f89d 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <MX_TIM3_Init+0xe0>)
 80014ac:	f002 fa10 	bl	80038d0 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014b6:	f000 f88f 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014ba:	4817      	ldr	r0, [pc, #92]	; (8001518 <MX_TIM3_Init+0xe0>)
 80014bc:	f002 f8fb 	bl	80036b6 <HAL_TIM_OC_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014c6:	f000 f887 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ca:	2320      	movs	r3, #32
 80014cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	4619      	mov	r1, r3
 80014d8:	480f      	ldr	r0, [pc, #60]	; (8001518 <MX_TIM3_Init+0xe0>)
 80014da:	f002 fd7d 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014e4:	f000 f878 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM3_Init+0xe0>)
 8001500:	f002 f986 	bl	8003810 <HAL_TIM_OC_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800150a:	f000 f865 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3738      	adds	r7, #56	; 0x38
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000c88 	.word	0x20000c88
 800151c:	40000400 	.word	0x40000400

08001520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f002 fdac 	bl	80040b4 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f000 f839 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000d10 	.word	0x20000d10
 8001570:	40004400 	.word	0x40004400

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_GPIO_Init+0x5c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <MX_GPIO_Init+0x5c>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6313      	str	r3, [r2, #48]	; 0x30
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_GPIO_Init+0x5c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2120      	movs	r1, #32
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <MX_GPIO_Init+0x60>)
 80015aa:	f001 fc03 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015ae:	2320      	movs	r3, #32
 80015b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_GPIO_Init+0x60>)
 80015c4:	f001 fa74 	bl	8002ab0 <HAL_GPIO_Init>

}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  // Manteniamo il LED acceso per segnalare un errore:
  HAL_GPIO_WritePin (LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2120      	movs	r1, #32
 80015e0:	4801      	ldr	r0, [pc, #4]	; (80015e8 <Error_Handler+0x10>)
 80015e2:	f001 fbe7 	bl	8002db4 <HAL_GPIO_WritePin>
  while(1);
 80015e6:	e7fe      	b.n	80015e6 <Error_Handler+0xe>
 80015e8:	40020000 	.word	0x40020000

080015ec <SER_GetRxState>:
static volatile int TxState = SER_TX_EMPTY;
static volatile int RxState = SER_RX_EMPTY;


int SER_GetRxState()
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	return RxState;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <SER_GetRxState+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000c84 	.word	0x20000c84

08001604 <SER_GetTxState>:


int SER_GetTxState()
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	return TxState;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <SER_GetTxState+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000018 	.word	0x20000018

0800161c <SER_SetRxState>:


int SER_SetRxState(int state)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if((state != SER_RX_EMPTY) && (state != SER_RX_OPCODE_TT) && (state != SER_RX_OPCODE_TL) &&
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d013      	beq.n	8001652 <SER_SetRxState+0x36>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d010      	beq.n	8001652 <SER_SetRxState+0x36>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d00d      	beq.n	8001652 <SER_SetRxState+0x36>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d00a      	beq.n	8001652 <SER_SetRxState+0x36>
	   (state != SER_RX_OPCODE_SP) && (state != SER_RX_TT) && (state != SER_RX_TL) && (state != SER_RX_SP))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d007      	beq.n	8001652 <SER_SetRxState+0x36>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d004      	beq.n	8001652 <SER_SetRxState+0x36>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b06      	cmp	r3, #6
 800164c:	d001      	beq.n	8001652 <SER_SetRxState+0x36>
	{
		return SER_ERR;
 800164e:	2301      	movs	r3, #1
 8001650:	e003      	b.n	800165a <SER_SetRxState+0x3e>
	}
	else
	{
		RxState = state;
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SER_SetRxState+0x4c>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]
		return SER_OK;
 8001658:	2300      	movs	r3, #0
	}
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000c84 	.word	0x20000c84

0800166c <SER_SetTxState>:


int SER_SetTxState(int state)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	if((state != SER_TX_EMPTY) && (state != SER_TX_FULL))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d004      	beq.n	8001684 <SER_SetTxState+0x18>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SER_SetTxState+0x18>
		{
			return SER_ERR;
 8001680:	2301      	movs	r3, #1
 8001682:	e003      	b.n	800168c <SER_SetTxState+0x20>
		}
		else
		{
			TxState = state;
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <SER_SetTxState+0x2c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
			return SER_OK;
 800168a:	2300      	movs	r3, #0
		}
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000018 	.word	0x20000018

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_ADC_MspInit+0x8c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12f      	bne.n	800176e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_ADC_MspInit+0x90>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_ADC_MspInit+0x90>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_ADC_MspInit+0x90>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_ADC_MspInit+0x90>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <HAL_ADC_MspInit+0x90>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_ADC_MspInit+0x90>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CH0_Pin|CH1_Pin;
 8001746:	2303      	movs	r3, #3
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174a:	2303      	movs	r3, #3
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <HAL_ADC_MspInit+0x94>)
 800175a:	f001 f9a9 	bl	8002ab0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2012      	movs	r0, #18
 8001764:	f001 f94b 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001768:	2012      	movs	r0, #18
 800176a:	f001 f964 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012000 	.word	0x40012000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10d      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <HAL_TIM_Base_MspInit+0x40>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_UART_MspInit+0x94>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d133      	bne.n	8001852 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_UART_MspInit+0x98>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_UART_MspInit+0x98>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x98>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0x98>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_UART_MspInit+0x98>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_UART_MspInit+0x98>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001822:	230c      	movs	r3, #12
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001832:	2307      	movs	r3, #7
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <HAL_UART_MspInit+0x9c>)
 800183e:	f001 f937 	bl	8002ab0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	210a      	movs	r1, #10
 8001846:	2026      	movs	r0, #38	; 0x26
 8001848:	f001 f8d9 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800184c:	2026      	movs	r0, #38	; 0x26
 800184e:	f001 f8f2 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40004400 	.word	0x40004400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f8a8 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <ADC_IRQHandler+0x10>)
 80018ca:	f000 f9b5 	bl	8001c38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000cc8 	.word	0x20000cc8

080018d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART2_IRQHandler+0x10>)
 80018de:	f002 fcd1 	bl	8004284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000d10 	.word	0x20000d10

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <SystemInit+0x28>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <SystemInit+0x28>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SystemInit+0x28>)
 8001902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001906:	609a      	str	r2, [r3, #8]
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr  r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffd3 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f003 fa3b 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fc5f 	bl	800120c <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001950:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001954:	08004e58 	.word	0x08004e58
  ldr  r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800195c:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8001960:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8001964:	20000d54 	.word	0x20000d54

08001968 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <DMA1_Stream0_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f001 f827 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fe7c 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f83f 	bl	8002a52 <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ec:	f001 f807 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000001c 	.word	0x2000001c
 8001a08:	20000024 	.word	0x20000024
 8001a0c:	20000020 	.word	0x20000020

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000024 	.word	0x20000024
 8001a34:	20000d50 	.word	0x20000d50

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000d50 	.word	0x20000d50

08001a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e033      	b.n	8001ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fe3c 	bl	80016ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a96:	f023 0302 	bic.w	r3, r3, #2
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fb42 	bl	800212c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
 8001abe:	e001      	b.n	8001ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Start_IT+0x1a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e094      	b.n	8001c1c <HAL_ADC_Start_IT+0x144>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d018      	beq.n	8001b3a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_ADC_Start_IT+0x150>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a43      	ldr	r2, [pc, #268]	; (8001c2c <HAL_ADC_Start_IT+0x154>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9a      	lsrs	r2, r3, #18
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d168      	bne.n	8001c1a <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b86:	d106      	bne.n	8001b96 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f023 0206 	bic.w	r2, r3, #6
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_ADC_Start_IT+0x158>)
 8001ba6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11c      	bne.n	8001c1a <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	e013      	b.n	8001c1a <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_ADC_Start_IT+0x15c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d10e      	bne.n	8001c1a <HAL_ADC_Start_IT+0x142>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c18:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	2000001c 	.word	0x2000001c
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	40012300 	.word	0x40012300
 8001c34:	40012000 	.word	0x40012000

08001c38 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d049      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xd6>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d046      	beq.n	8001d0e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d12b      	bne.n	8001cfe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d127      	bne.n	8001cfe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d119      	bne.n	8001cfe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0220 	bic.w	r2, r2, #32
 8001cd8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fec4 	bl	8000a8c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0212 	mvn.w	r2, #18
 8001d0c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d057      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x1b8>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d054      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d139      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12b      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d124      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11d      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d119      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe ff5f 	bl	8000ca4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 020c 	mvn.w	r2, #12
 8001dee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d017      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x21a>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d014      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f846 	bl	8001ed4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0201 	mvn.w	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x27a>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe ffc6 	bl	8000e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0220 	mvn.w	r2, #32
 8001eb0:	601a      	str	r2, [r3, #0]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1c>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e105      	b.n	8002110 <HAL_ADC_ConfigChannel+0x228>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d925      	bls.n	8001f60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68d9      	ldr	r1, [r3, #12]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	3b1e      	subs	r3, #30
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43da      	mvns	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	400a      	ands	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68d9      	ldr	r1, [r3, #12]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4403      	add	r3, r0
 8001f52:	3b1e      	subs	r3, #30
 8001f54:	409a      	lsls	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e022      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	2207      	movs	r2, #7
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4403      	add	r3, r0
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d824      	bhi.n	8001ff8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b05      	subs	r3, #5
 8001fc0:	221f      	movs	r2, #31
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	400a      	ands	r2, r1
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b05      	subs	r3, #5
 8001fea:	fa00 f203 	lsl.w	r2, r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff6:	e04c      	b.n	8002092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d824      	bhi.n	800204a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b23      	subs	r3, #35	; 0x23
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43da      	mvns	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	400a      	ands	r2, r1
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b23      	subs	r3, #35	; 0x23
 800203c:	fa00 f203 	lsl.w	r2, r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
 8002048:	e023      	b.n	8002092 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b41      	subs	r3, #65	; 0x41
 800205c:	221f      	movs	r2, #31
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b41      	subs	r3, #65	; 0x41
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_ADC_ConfigChannel+0x234>)
 8002094:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_ADC_ConfigChannel+0x238>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1cc>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b12      	cmp	r3, #18
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_ADC_ConfigChannel+0x238>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d123      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d003      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x1e6>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b11      	cmp	r3, #17
 80020cc:	d11b      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d111      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_ADC_ConfigChannel+0x23c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <HAL_ADC_ConfigChannel+0x240>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	0c9a      	lsrs	r2, r3, #18
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	40012000 	.word	0x40012000
 8002124:	2000001c 	.word	0x2000001c
 8002128:	431bde83 	.word	0x431bde83

0800212c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002134:	4b79      	ldr	r3, [pc, #484]	; (800231c <ADC_Init+0x1f0>)
 8002136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <ADC_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e00f      	b.n	800222a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0202 	bic.w	r2, r2, #2
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	035a      	lsls	r2, r3, #13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051a      	lsls	r2, r3, #20
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	029a      	lsls	r2, r3, #10
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	0f000001 	.word	0x0f000001

08002324 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_InjectedStart_IT+0x22>
 8002342:	2302      	movs	r3, #2
 8002344:	e0a5      	b.n	8002492 <HAL_ADCEx_InjectedStart_IT+0x16e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_ADCEx_InjectedStart_IT+0x17c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_ADCEx_InjectedStart_IT+0x180>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d179      	bne.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0204 	mvn.w	r2, #4
 80023d2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_ADCEx_InjectedStart_IT+0x184>)
 80023e6:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d124      	bne.n	800243e <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d034      	beq.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d031      	beq.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e028      	b.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_ADCEx_InjectedStart_IT+0x188>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10d      	bne.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_ADCEx_InjectedStart_IT+0x16c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800248e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	2000001c 	.word	0x2000001c
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	40012300 	.word	0x40012300
 80024ac:	40012000 	.word	0x40012000

080024b0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0204 	mvn.w	r2, #4
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d81f      	bhi.n	8002510 <HAL_ADCEx_InjectedGetValue+0x60>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <HAL_ADCEx_InjectedGetValue+0x28>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	08002507 	.word	0x08002507
 80024dc:	080024fd 	.word	0x080024fd
 80024e0:	080024f3 	.word	0x080024f3
 80024e4:	080024e9 	.word	0x080024e9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80024f0:	e00f      	b.n	8002512 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80024fa:	e00a      	b.n	8002512 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	60fb      	str	r3, [r7, #12]
    }
    break;
 8002504:	e005      	b.n	8002512 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800250e:	e000      	b.n	8002512 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8002510:	bf00      	nop
  }
  return tmp;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002534:	2302      	movs	r3, #2
 8002536:	e17a      	b.n	800282e <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	051a      	lsls	r2, r3, #20
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3303      	adds	r3, #3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3303      	adds	r3, #3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	fa00 f203 	lsl.w	r2, r0, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a73      	ldr	r2, [pc, #460]	; (800283c <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d022      	beq.n	80026b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	699a      	ldr	r2, [r3, #24]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e00f      	b.n	80026d8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80026c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026d6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7d5b      	ldrb	r3, [r3, #21]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	e007      	b.n	8002702 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7d1b      	ldrb	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e007      	b.n	800272c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d017      	beq.n	8002764 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8002734:	2b03      	cmp	r3, #3
 8002736:	d029      	beq.n	800278c <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8002738:	2b01      	cmp	r3, #1
 800273a:	d13b      	bne.n	80027b4 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6959      	ldr	r1, [r3, #20]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	615a      	str	r2, [r3, #20]
      break;
 8002762:	e03b      	b.n	80027dc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	619a      	str	r2, [r3, #24]
      break;
 800278a:	e027      	b.n	80027dc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800279a:	f023 030f 	bic.w	r3, r3, #15
 800279e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69d9      	ldr	r1, [r3, #28]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	61da      	str	r2, [r3, #28]
      break;
 80027b2:	e013      	b.n	80027dc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a19      	ldr	r1, [r3, #32]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	621a      	str	r2, [r3, #32]
      break;
 80027da:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80027de:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d109      	bne.n	80027fe <HAL_ADCEx_InjectedConfigChannel+0x2de>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b12      	cmp	r3, #18
 80027f0:	d105      	bne.n	80027fe <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10d      	bne.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d003      	beq.n	8002818 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b11      	cmp	r3, #17
 8002816:	d105      	bne.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	000f0001 	.word	0x000f0001
 8002840:	40012300 	.word	0x40012300
 8002844:	40012000 	.word	0x40012000

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff29 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff3e 	bl	8002890 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff31 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffa2 	bl	80029a4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d004      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e00c      	b.n	8002aa2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e159      	b.n	8002d80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 8148 	bne.w	8002d7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00b      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afe:	2b11      	cmp	r3, #17
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0xfc>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a2 	beq.w	8002d7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b56      	ldr	r3, [pc, #344]	; (8002d94 <HAL_GPIO_Init+0x2e4>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_GPIO_Init+0x2e4>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_GPIO_Init+0x2e4>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c52:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_GPIO_Init+0x2ec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x202>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a47      	ldr	r2, [pc, #284]	; (8002da0 <HAL_GPIO_Init+0x2f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x1fe>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a46      	ldr	r2, [pc, #280]	; (8002da4 <HAL_GPIO_Init+0x2f4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x1fa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a45      	ldr	r2, [pc, #276]	; (8002da8 <HAL_GPIO_Init+0x2f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x1f6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a44      	ldr	r2, [pc, #272]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x1f2>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e008      	b.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e004      	b.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e002      	b.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f002 0203 	and.w	r2, r2, #3
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	4093      	lsls	r3, r2
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc4:	4934      	ldr	r1, [pc, #208]	; (8002d98 <HAL_GPIO_Init+0x2e8>)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf6:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	f67f aea2 	bls.w	8002acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3724      	adds	r7, #36	; 0x24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40013c00 	.word	0x40013c00

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e25b      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d075      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e06:	4ba3      	ldr	r3, [pc, #652]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d112      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b9d      	ldr	r3, [pc, #628]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2a:	d10b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05b      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x108>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d157      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e236      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x74>
 8002e4e:	4b91      	ldr	r3, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a90      	ldr	r2, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x98>
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8a      	ldr	r2, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a87      	ldr	r2, [pc, #540]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xb0>
 8002e80:	4b84      	ldr	r3, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a83      	ldr	r2, [pc, #524]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a80      	ldr	r2, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fdca 	bl	8001a38 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fdc6 	bl	8001a38 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1fb      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xc0>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fdb6 	bl	8001a38 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fdb2 	bl	8001a38 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1e7      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xe8>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002efe:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b5f      	ldr	r3, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1bb      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4952      	ldr	r1, [pc, #328]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCC_OscConfig+0x2b0>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fd6b 	bl	8001a38 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fd67 	bl	8001a38 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e19c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x2b0>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd4a 	bl	8001a38 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fd46 	bl	8001a38 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e17b      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d030      	beq.n	8003034 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_OscConfig+0x2b4>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fd2a 	bl	8001a38 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fd26 	bl	8001a38 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e15b      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x200>
 8003006:	e015      	b.n	8003034 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x2b4>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe fd13 	bl	8001a38 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003016:	f7fe fd0f 	bl	8001a38 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e144      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a0 	beq.w	8003182 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d121      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x2b8>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308a:	f7fe fcd5 	bl	8001a38 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	e011      	b.n	80030b6 <HAL_RCC_OscConfig+0x2ce>
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
 80030a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fe fcc8 	bl	8001a38 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0fd      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x4d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2f0>
 80030ca:	4b7d      	ldr	r3, [pc, #500]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	4a7c      	ldr	r2, [pc, #496]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6713      	str	r3, [r2, #112]	; 0x70
 80030d6:	e01c      	b.n	8003112 <HAL_RCC_OscConfig+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x312>
 80030e0:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a76      	ldr	r2, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	4b74      	ldr	r3, [pc, #464]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a73      	ldr	r2, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	e00b      	b.n	8003112 <HAL_RCC_OscConfig+0x32a>
 80030fa:	4b71      	ldr	r3, [pc, #452]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a70      	ldr	r2, [pc, #448]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	4b6e      	ldr	r3, [pc, #440]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a6d      	ldr	r2, [pc, #436]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d015      	beq.n	8003146 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fe fc8d 	bl	8001a38 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	e00a      	b.n	8003138 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe fc89 	bl	8001a38 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0bc      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ee      	beq.n	8003122 <HAL_RCC_OscConfig+0x33a>
 8003144:	e014      	b.n	8003170 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fe fc77 	bl	8001a38 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7fe fc73 	bl	8001a38 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	; 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0a6      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ee      	bne.n	800314e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d105      	bne.n	8003182 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a51      	ldr	r2, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8092 	beq.w	80032b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d05c      	beq.n	8003252 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d141      	bne.n	8003224 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_RCC_OscConfig+0x4dc>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fc47 	bl	8001a38 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe fc43 	bl	8001a38 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e078      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	019b      	lsls	r3, r3, #6
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	4933      	ldr	r1, [pc, #204]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <HAL_RCC_OscConfig+0x4dc>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fc1c 	bl	8001a38 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe fc18 	bl	8001a38 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e04d      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x41c>
 8003222:	e045      	b.n	80032b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x4dc>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fc05 	bl	8001a38 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fc01 	bl	8001a38 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e036      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x44a>
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e029      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_RCC_OscConfig+0x4d8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	429a      	cmp	r2, r3
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d115      	bne.n	80032ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003286:	4013      	ands	r3, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800328c:	4293      	cmp	r3, r2
 800328e:	d10d      	bne.n	80032ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000
 80032c0:	40023800 	.word	0x40023800
 80032c4:	42470060 	.word	0x42470060

080032c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0cc      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d90c      	bls.n	8003304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800333e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d044      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d119      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d003      	beq.n	8003386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	2b03      	cmp	r3, #3
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e067      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4934      	ldr	r1, [pc, #208]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fb3e 	bl	8001a38 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe fb3a 	bl	8001a38 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e04f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d20c      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f821 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003452:	4601      	mov	r1, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	5cd3      	ldrb	r3, [r2, r3]
 8003462:	fa21 f303 	lsr.w	r3, r1, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fa9e 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00
 8003484:	40023800 	.word	0x40023800
 8003488:	08004e30 	.word	0x08004e30
 800348c:	2000001c 	.word	0x2000001c
 8003490:	20000020 	.word	0x20000020

08003494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	2300      	movs	r3, #0
 80034a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d007      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x32>
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d008      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x38>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 808d 	bne.w	80035da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80034c2:	60bb      	str	r3, [r7, #8]
       break;
 80034c4:	e08c      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80034c8:	60bb      	str	r3, [r7, #8]
      break;
 80034ca:	e089      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d6:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d023      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	f04f 0400 	mov.w	r4, #0
 80034ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	ea03 0501 	and.w	r5, r3, r1
 80034f8:	ea04 0602 	and.w	r6, r4, r2
 80034fc:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80034fe:	fb02 f106 	mul.w	r1, r2, r6
 8003502:	2200      	movs	r2, #0
 8003504:	fb02 f205 	mul.w	r2, r2, r5
 8003508:	440a      	add	r2, r1
 800350a:	493a      	ldr	r1, [pc, #232]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800350c:	fba5 0101 	umull	r0, r1, r5, r1
 8003510:	1853      	adds	r3, r2, r1
 8003512:	4619      	mov	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f04f 0400 	mov.w	r4, #0
 800351a:	461a      	mov	r2, r3
 800351c:	4623      	mov	r3, r4
 800351e:	f7fc fe59 	bl	80001d4 <__aeabi_uldivmod>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e049      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	ea03 0501 	and.w	r5, r3, r1
 8003540:	ea04 0602 	and.w	r6, r4, r2
 8003544:	4629      	mov	r1, r5
 8003546:	4632      	mov	r2, r6
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	f04f 0400 	mov.w	r4, #0
 8003550:	0154      	lsls	r4, r2, #5
 8003552:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003556:	014b      	lsls	r3, r1, #5
 8003558:	4619      	mov	r1, r3
 800355a:	4622      	mov	r2, r4
 800355c:	1b49      	subs	r1, r1, r5
 800355e:	eb62 0206 	sbc.w	r2, r2, r6
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	0194      	lsls	r4, r2, #6
 800356c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003570:	018b      	lsls	r3, r1, #6
 8003572:	1a5b      	subs	r3, r3, r1
 8003574:	eb64 0402 	sbc.w	r4, r4, r2
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	00e2      	lsls	r2, r4, #3
 8003582:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003586:	00d9      	lsls	r1, r3, #3
 8003588:	460b      	mov	r3, r1
 800358a:	4614      	mov	r4, r2
 800358c:	195b      	adds	r3, r3, r5
 800358e:	eb44 0406 	adc.w	r4, r4, r6
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	02a2      	lsls	r2, r4, #10
 800359c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035a0:	0299      	lsls	r1, r3, #10
 80035a2:	460b      	mov	r3, r1
 80035a4:	4614      	mov	r4, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	4621      	mov	r1, r4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f04f 0400 	mov.w	r4, #0
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	f7fc fe0e 	bl	80001d4 <__aeabi_uldivmod>
 80035b8:	4603      	mov	r3, r0
 80035ba:	460c      	mov	r4, r1
 80035bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x158>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	0c1b      	lsrs	r3, r3, #16
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	3301      	adds	r3, #1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	60bb      	str	r3, [r7, #8]
      break;
 80035d8:	e002      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80035dc:	60bb      	str	r3, [r7, #8]
      break;
 80035de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e0:	68bb      	ldr	r3, [r7, #8]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	017d7840 	.word	0x017d7840

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	2000001c 	.word	0x2000001c

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4601      	mov	r1, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4a03      	ldr	r2, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08004e40 	.word	0x08004e40

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4601      	mov	r1, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4a03      	ldr	r2, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08004e40 	.word	0x08004e40

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e01d      	b.n	80036ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f87c 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 f9ce 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01d      	b.n	8003704 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f815 	bl	800370c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 f9a3 	bl	8003a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d841      	bhi.n	80037b4 <HAL_TIM_OC_Start_IT+0x94>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <HAL_TIM_OC_Start_IT+0x18>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800376d 	.word	0x0800376d
 800373c:	080037b5 	.word	0x080037b5
 8003740:	080037b5 	.word	0x080037b5
 8003744:	080037b5 	.word	0x080037b5
 8003748:	0800377f 	.word	0x0800377f
 800374c:	080037b5 	.word	0x080037b5
 8003750:	080037b5 	.word	0x080037b5
 8003754:	080037b5 	.word	0x080037b5
 8003758:	08003791 	.word	0x08003791
 800375c:	080037b5 	.word	0x080037b5
 8003760:	080037b5 	.word	0x080037b5
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037a3 	.word	0x080037a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0202 	orr.w	r2, r2, #2
 800377a:	60da      	str	r2, [r3, #12]
      break;
 800377c:	e01b      	b.n	80037b6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0204 	orr.w	r2, r2, #4
 800378c:	60da      	str	r2, [r3, #12]
      break;
 800378e:	e012      	b.n	80037b6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	60da      	str	r2, [r3, #12]
      break;
 80037a0:	e009      	b.n	80037b6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0210 	orr.w	r2, r2, #16
 80037b0:	60da      	str	r2, [r3, #12]
      break;
 80037b2:	e000      	b.n	80037b6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80037b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fbe4 	bl	8003f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_TIM_OC_Start_IT+0xec>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d107      	bne.n	80037de <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d007      	beq.n	8003800 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000

08003810 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003826:	2302      	movs	r3, #2
 8003828:	e04e      	b.n	80038c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d839      	bhi.n	80038b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003840:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	0800387d 	.word	0x0800387d
 800384c:	080038b5 	.word	0x080038b5
 8003850:	080038b5 	.word	0x080038b5
 8003854:	080038b5 	.word	0x080038b5
 8003858:	0800388b 	.word	0x0800388b
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	08003899 	.word	0x08003899
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038b5 	.word	0x080038b5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038a7 	.word	0x080038a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f95c 	bl	8003b40 <TIM_OC1_SetConfig>
      break;
 8003888:	e015      	b.n	80038b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f9bb 	bl	8003c0c <TIM_OC2_SetConfig>
      break;
 8003896:	e00e      	b.n	80038b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa20 	bl	8003ce4 <TIM_OC3_SetConfig>
      break;
 80038a4:	e007      	b.n	80038b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa83 	bl	8003db8 <TIM_OC4_SetConfig>
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80038b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_TIM_ConfigClockSource+0x18>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e0a6      	b.n	8003a36 <HAL_TIM_ConfigClockSource+0x166>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003906:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800390e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d067      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x120>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d80b      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x6c>
 8003924:	2b10      	cmp	r3, #16
 8003926:	d073      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
 8003928:	2b10      	cmp	r3, #16
 800392a:	d802      	bhi.n	8003932 <HAL_TIM_ConfigClockSource+0x62>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d06f      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003930:	e078      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003932:	2b20      	cmp	r3, #32
 8003934:	d06c      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	d06a      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800393a:	e073      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800393c:	2b70      	cmp	r3, #112	; 0x70
 800393e:	d00d      	beq.n	800395c <HAL_TIM_ConfigClockSource+0x8c>
 8003940:	2b70      	cmp	r3, #112	; 0x70
 8003942:	d804      	bhi.n	800394e <HAL_TIM_ConfigClockSource+0x7e>
 8003944:	2b50      	cmp	r3, #80	; 0x50
 8003946:	d033      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xe0>
 8003948:	2b60      	cmp	r3, #96	; 0x60
 800394a:	d041      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800394c:	e06a      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d066      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x152>
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d017      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800395a:	e063      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f000 faee 	bl	8003f4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800397e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e04c      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f000 fad7 	bl	8003f4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ac:	609a      	str	r2, [r3, #8]
      break;
 80039ae:	e039      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	461a      	mov	r2, r3
 80039be:	f000 fa4b 	bl	8003e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2150      	movs	r1, #80	; 0x50
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 faa4 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 80039ce:	e029      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	461a      	mov	r2, r3
 80039de:	f000 fa6a 	bl	8003eb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2160      	movs	r1, #96	; 0x60
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fa94 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 80039ee:	e019      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f000 fa2b 	bl	8003e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fa84 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003a0e:	e009      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 fa7b 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003a20:	e000      	b.n	8003a24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <TIM_Base_SetConfig+0xe4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0x38>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0x38>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <TIM_Base_SetConfig+0xe8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0x38>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <TIM_Base_SetConfig+0xec>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0x38>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <TIM_Base_SetConfig+0xf0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d108      	bne.n	8003a8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <TIM_Base_SetConfig+0xe4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01b      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d017      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <TIM_Base_SetConfig+0xe8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <TIM_Base_SetConfig+0xec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <TIM_Base_SetConfig+0xf0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <TIM_Base_SetConfig+0xf4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <TIM_Base_SetConfig+0xf8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <TIM_Base_SetConfig+0xfc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d108      	bne.n	8003adc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <TIM_Base_SetConfig+0xe4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800

08003b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f023 0201 	bic.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f023 0302 	bic.w	r3, r3, #2
 8003b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <TIM_OC1_SetConfig+0xc8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10c      	bne.n	8003bb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0308 	bic.w	r3, r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <TIM_OC1_SetConfig+0xc8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40010000 	.word	0x40010000

08003c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f023 0210 	bic.w	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0320 	bic.w	r3, r3, #32
 8003c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <TIM_OC2_SetConfig+0xd4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10d      	bne.n	8003c88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <TIM_OC2_SetConfig+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d113      	bne.n	8003cb8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000

08003ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <TIM_OC3_SetConfig+0xd0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10d      	bne.n	8003d5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <TIM_OC3_SetConfig+0xd0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d113      	bne.n	8003d8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40010000 	.word	0x40010000

08003db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <TIM_OC4_SetConfig+0x9c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000

08003e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 030a 	bic.w	r3, r3, #10
 8003e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b087      	sub	sp, #28
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0210 	bic.w	r2, r3, #16
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	031b      	lsls	r3, r3, #12
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f043 0307 	orr.w	r3, r3, #7
 8003f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	401a      	ands	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e050      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d018      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d013      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a15      	ldr	r2, [pc, #84]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40014000 	.word	0x40014000

080040b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e03f      	b.n	8004146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fb74 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fae5 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800412c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	d130      	bne.n	80041ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Transmit_IT+0x26>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e029      	b.n	80041cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Transmit_IT+0x38>
 8004182:	2302      	movs	r3, #2
 8004184:	e022      	b.n	80041cc <HAL_UART_Transmit_IT+0x7e>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d140      	bne.n	8004274 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_UART_Receive_IT+0x26>
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e039      	b.n	8004276 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_UART_Receive_IT+0x38>
 800420c:	2302      	movs	r3, #2
 800420e:	e032      	b.n	8004276 <HAL_UART_Receive_IT+0x9e>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2222      	movs	r2, #34	; 0x22
 8004234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0220 	orr.w	r2, r2, #32
 800426e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_UART_IRQHandler+0x52>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f978 	bl	80045c4 <UART_Receive_IT>
      return;
 80042d4:	e0d1      	b.n	800447a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80b0 	beq.w	800443e <HAL_UART_IRQHandler+0x1ba>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_UART_IRQHandler+0x70>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80a5 	beq.w	800443e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_UART_IRQHandler+0x90>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	f043 0201 	orr.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_UART_IRQHandler+0xb0>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	f043 0202 	orr.w	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_UART_IRQHandler+0xd0>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <HAL_UART_IRQHandler+0xfa>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <HAL_UART_IRQHandler+0xee>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d078      	beq.n	8004478 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_UART_IRQHandler+0x11c>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f912 	bl	80045c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_UART_IRQHandler+0x144>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d031      	beq.n	800442c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f85b 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d123      	bne.n	8004424 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	4a21      	ldr	r2, [pc, #132]	; (8004480 <HAL_UART_IRQHandler+0x1fc>)
 80043fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fb32 	bl	8002a6a <HAL_DMA_Abort_IT>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004416:	4610      	mov	r0, r2
 8004418:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441a:	e00e      	b.n	800443a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc fb2b 	bl	8000a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004422:	e00a      	b.n	800443a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fc fb27 	bl	8000a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442a:	e006      	b.n	800443a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fb23 	bl	8000a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004438:	e01e      	b.n	8004478 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443a:	bf00      	nop
    return;
 800443c:	e01c      	b.n	8004478 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_UART_IRQHandler+0x1d6>
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f848 	bl	80044e8 <UART_Transmit_IT>
    return;
 8004458:	e00f      	b.n	800447a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_UART_IRQHandler+0x1f6>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f890 	bl	8004594 <UART_EndTransmit_IT>
    return;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004478:	bf00      	nop
  }
}
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	080044c1 	.word	0x080044c1

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800449a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7fc facc 	bl	8000a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d144      	bne.n	8004586 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d11a      	bne.n	800453c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]
 800452e:	e00e      	b.n	800454e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]
 800453a:	e008      	b.n	800454e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6211      	str	r1, [r2, #32]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fc f95f 	bl	8000878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b22      	cmp	r3, #34	; 0x22
 80045d6:	d171      	bne.n	80046bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e0:	d123      	bne.n	800462a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10e      	bne.n	800460e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
 800460c:	e029      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	b29b      	uxth	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e01b      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6858      	ldr	r0, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6291      	str	r1, [r2, #40]	; 0x28
 8004642:	b2c2      	uxtb	r2, r0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e00c      	b.n	8004662 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	1c58      	adds	r0, r3, #1
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	6288      	str	r0, [r1, #40]	; 0x28
 800465a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004672:	2b00      	cmp	r3, #0
 8004674:	d120      	bne.n	80046b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0220 	bic.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc f91e 	bl	80008f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e002      	b.n	80046be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800470a:	f023 030c 	bic.w	r3, r3, #12
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	430b      	orrs	r3, r1
 8004716:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004736:	f040 818b 	bne.w	8004a50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4ac1      	ldr	r2, [pc, #772]	; (8004a44 <UART_SetConfig+0x37c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d005      	beq.n	8004750 <UART_SetConfig+0x88>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4abf      	ldr	r2, [pc, #764]	; (8004a48 <UART_SetConfig+0x380>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f040 80bd 	bne.w	80048ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe ff72 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004754:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	461d      	mov	r5, r3
 800475a:	f04f 0600 	mov.w	r6, #0
 800475e:	46a8      	mov	r8, r5
 8004760:	46b1      	mov	r9, r6
 8004762:	eb18 0308 	adds.w	r3, r8, r8
 8004766:	eb49 0409 	adc.w	r4, r9, r9
 800476a:	4698      	mov	r8, r3
 800476c:	46a1      	mov	r9, r4
 800476e:	eb18 0805 	adds.w	r8, r8, r5
 8004772:	eb49 0906 	adc.w	r9, r9, r6
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004782:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004786:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800478a:	4688      	mov	r8, r1
 800478c:	4691      	mov	r9, r2
 800478e:	eb18 0005 	adds.w	r0, r8, r5
 8004792:	eb49 0106 	adc.w	r1, r9, r6
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	461d      	mov	r5, r3
 800479c:	f04f 0600 	mov.w	r6, #0
 80047a0:	196b      	adds	r3, r5, r5
 80047a2:	eb46 0406 	adc.w	r4, r6, r6
 80047a6:	461a      	mov	r2, r3
 80047a8:	4623      	mov	r3, r4
 80047aa:	f7fb fd13 	bl	80001d4 <__aeabi_uldivmod>
 80047ae:	4603      	mov	r3, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	461a      	mov	r2, r3
 80047b4:	4ba5      	ldr	r3, [pc, #660]	; (8004a4c <UART_SetConfig+0x384>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	461d      	mov	r5, r3
 80047c4:	f04f 0600 	mov.w	r6, #0
 80047c8:	46a9      	mov	r9, r5
 80047ca:	46b2      	mov	sl, r6
 80047cc:	eb19 0309 	adds.w	r3, r9, r9
 80047d0:	eb4a 040a 	adc.w	r4, sl, sl
 80047d4:	4699      	mov	r9, r3
 80047d6:	46a2      	mov	sl, r4
 80047d8:	eb19 0905 	adds.w	r9, r9, r5
 80047dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047f4:	4689      	mov	r9, r1
 80047f6:	4692      	mov	sl, r2
 80047f8:	eb19 0005 	adds.w	r0, r9, r5
 80047fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461d      	mov	r5, r3
 8004806:	f04f 0600 	mov.w	r6, #0
 800480a:	196b      	adds	r3, r5, r5
 800480c:	eb46 0406 	adc.w	r4, r6, r6
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	f7fb fcde 	bl	80001d4 <__aeabi_uldivmod>
 8004818:	4603      	mov	r3, r0
 800481a:	460c      	mov	r4, r1
 800481c:	461a      	mov	r2, r3
 800481e:	4b8b      	ldr	r3, [pc, #556]	; (8004a4c <UART_SetConfig+0x384>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	2164      	movs	r1, #100	; 0x64
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	3332      	adds	r3, #50	; 0x32
 8004832:	4a86      	ldr	r2, [pc, #536]	; (8004a4c <UART_SetConfig+0x384>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004840:	4498      	add	r8, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	461d      	mov	r5, r3
 8004846:	f04f 0600 	mov.w	r6, #0
 800484a:	46a9      	mov	r9, r5
 800484c:	46b2      	mov	sl, r6
 800484e:	eb19 0309 	adds.w	r3, r9, r9
 8004852:	eb4a 040a 	adc.w	r4, sl, sl
 8004856:	4699      	mov	r9, r3
 8004858:	46a2      	mov	sl, r4
 800485a:	eb19 0905 	adds.w	r9, r9, r5
 800485e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004876:	4689      	mov	r9, r1
 8004878:	4692      	mov	sl, r2
 800487a:	eb19 0005 	adds.w	r0, r9, r5
 800487e:	eb4a 0106 	adc.w	r1, sl, r6
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	461d      	mov	r5, r3
 8004888:	f04f 0600 	mov.w	r6, #0
 800488c:	196b      	adds	r3, r5, r5
 800488e:	eb46 0406 	adc.w	r4, r6, r6
 8004892:	461a      	mov	r2, r3
 8004894:	4623      	mov	r3, r4
 8004896:	f7fb fc9d 	bl	80001d4 <__aeabi_uldivmod>
 800489a:	4603      	mov	r3, r0
 800489c:	460c      	mov	r4, r1
 800489e:	461a      	mov	r2, r3
 80048a0:	4b6a      	ldr	r3, [pc, #424]	; (8004a4c <UART_SetConfig+0x384>)
 80048a2:	fba3 1302 	umull	r1, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2164      	movs	r1, #100	; 0x64
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <UART_SetConfig+0x384>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 0207 	and.w	r2, r3, #7
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4442      	add	r2, r8
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e26f      	b.n	8004daa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fe fea1 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80048ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	461d      	mov	r5, r3
 80048d4:	f04f 0600 	mov.w	r6, #0
 80048d8:	46a8      	mov	r8, r5
 80048da:	46b1      	mov	r9, r6
 80048dc:	eb18 0308 	adds.w	r3, r8, r8
 80048e0:	eb49 0409 	adc.w	r4, r9, r9
 80048e4:	4698      	mov	r8, r3
 80048e6:	46a1      	mov	r9, r4
 80048e8:	eb18 0805 	adds.w	r8, r8, r5
 80048ec:	eb49 0906 	adc.w	r9, r9, r6
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004900:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004904:	4688      	mov	r8, r1
 8004906:	4691      	mov	r9, r2
 8004908:	eb18 0005 	adds.w	r0, r8, r5
 800490c:	eb49 0106 	adc.w	r1, r9, r6
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	461d      	mov	r5, r3
 8004916:	f04f 0600 	mov.w	r6, #0
 800491a:	196b      	adds	r3, r5, r5
 800491c:	eb46 0406 	adc.w	r4, r6, r6
 8004920:	461a      	mov	r2, r3
 8004922:	4623      	mov	r3, r4
 8004924:	f7fb fc56 	bl	80001d4 <__aeabi_uldivmod>
 8004928:	4603      	mov	r3, r0
 800492a:	460c      	mov	r4, r1
 800492c:	461a      	mov	r2, r3
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <UART_SetConfig+0x384>)
 8004930:	fba3 2302 	umull	r2, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	461d      	mov	r5, r3
 800493e:	f04f 0600 	mov.w	r6, #0
 8004942:	46a9      	mov	r9, r5
 8004944:	46b2      	mov	sl, r6
 8004946:	eb19 0309 	adds.w	r3, r9, r9
 800494a:	eb4a 040a 	adc.w	r4, sl, sl
 800494e:	4699      	mov	r9, r3
 8004950:	46a2      	mov	sl, r4
 8004952:	eb19 0905 	adds.w	r9, r9, r5
 8004956:	eb4a 0a06 	adc.w	sl, sl, r6
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004966:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800496a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800496e:	4689      	mov	r9, r1
 8004970:	4692      	mov	sl, r2
 8004972:	eb19 0005 	adds.w	r0, r9, r5
 8004976:	eb4a 0106 	adc.w	r1, sl, r6
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	461d      	mov	r5, r3
 8004980:	f04f 0600 	mov.w	r6, #0
 8004984:	196b      	adds	r3, r5, r5
 8004986:	eb46 0406 	adc.w	r4, r6, r6
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fb fc21 	bl	80001d4 <__aeabi_uldivmod>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	461a      	mov	r2, r3
 8004998:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <UART_SetConfig+0x384>)
 800499a:	fba3 1302 	umull	r1, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2164      	movs	r1, #100	; 0x64
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <UART_SetConfig+0x384>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ba:	4498      	add	r8, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	461d      	mov	r5, r3
 80049c0:	f04f 0600 	mov.w	r6, #0
 80049c4:	46a9      	mov	r9, r5
 80049c6:	46b2      	mov	sl, r6
 80049c8:	eb19 0309 	adds.w	r3, r9, r9
 80049cc:	eb4a 040a 	adc.w	r4, sl, sl
 80049d0:	4699      	mov	r9, r3
 80049d2:	46a2      	mov	sl, r4
 80049d4:	eb19 0905 	adds.w	r9, r9, r5
 80049d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049f0:	4689      	mov	r9, r1
 80049f2:	4692      	mov	sl, r2
 80049f4:	eb19 0005 	adds.w	r0, r9, r5
 80049f8:	eb4a 0106 	adc.w	r1, sl, r6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	461d      	mov	r5, r3
 8004a02:	f04f 0600 	mov.w	r6, #0
 8004a06:	196b      	adds	r3, r5, r5
 8004a08:	eb46 0406 	adc.w	r4, r6, r6
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	f7fb fbe0 	bl	80001d4 <__aeabi_uldivmod>
 8004a14:	4603      	mov	r3, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <UART_SetConfig+0x384>)
 8004a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	2164      	movs	r1, #100	; 0x64
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	3332      	adds	r3, #50	; 0x32
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <UART_SetConfig+0x384>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	f003 0207 	and.w	r2, r3, #7
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4442      	add	r2, r8
 8004a40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a42:	e1b2      	b.n	8004daa <UART_SetConfig+0x6e2>
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4ad7      	ldr	r2, [pc, #860]	; (8004db4 <UART_SetConfig+0x6ec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d005      	beq.n	8004a66 <UART_SetConfig+0x39e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4ad6      	ldr	r2, [pc, #856]	; (8004db8 <UART_SetConfig+0x6f0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f040 80d1 	bne.w	8004c08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a66:	f7fe fde7 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004a6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	469a      	mov	sl, r3
 8004a70:	f04f 0b00 	mov.w	fp, #0
 8004a74:	46d0      	mov	r8, sl
 8004a76:	46d9      	mov	r9, fp
 8004a78:	eb18 0308 	adds.w	r3, r8, r8
 8004a7c:	eb49 0409 	adc.w	r4, r9, r9
 8004a80:	4698      	mov	r8, r3
 8004a82:	46a1      	mov	r9, r4
 8004a84:	eb18 080a 	adds.w	r8, r8, sl
 8004a88:	eb49 090b 	adc.w	r9, r9, fp
 8004a8c:	f04f 0100 	mov.w	r1, #0
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004aa0:	4688      	mov	r8, r1
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	eb1a 0508 	adds.w	r5, sl, r8
 8004aa8:	eb4b 0609 	adc.w	r6, fp, r9
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	0094      	lsls	r4, r2, #2
 8004ac0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ac4:	008b      	lsls	r3, r1, #2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4623      	mov	r3, r4
 8004aca:	4628      	mov	r0, r5
 8004acc:	4631      	mov	r1, r6
 8004ace:	f7fb fb81 	bl	80001d4 <__aeabi_uldivmod>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4bb8      	ldr	r3, [pc, #736]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	469b      	mov	fp, r3
 8004ae8:	f04f 0c00 	mov.w	ip, #0
 8004aec:	46d9      	mov	r9, fp
 8004aee:	46e2      	mov	sl, ip
 8004af0:	eb19 0309 	adds.w	r3, r9, r9
 8004af4:	eb4a 040a 	adc.w	r4, sl, sl
 8004af8:	4699      	mov	r9, r3
 8004afa:	46a2      	mov	sl, r4
 8004afc:	eb19 090b 	adds.w	r9, r9, fp
 8004b00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b18:	4689      	mov	r9, r1
 8004b1a:	4692      	mov	sl, r2
 8004b1c:	eb1b 0509 	adds.w	r5, fp, r9
 8004b20:	eb4c 060a 	adc.w	r6, ip, sl
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	0094      	lsls	r4, r2, #2
 8004b38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b3c:	008b      	lsls	r3, r1, #2
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4623      	mov	r3, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	4631      	mov	r1, r6
 8004b46:	f7fb fb45 	bl	80001d4 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b9a      	ldr	r3, [pc, #616]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a95      	ldr	r2, [pc, #596]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	4498      	add	r8, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	469b      	mov	fp, r3
 8004b76:	f04f 0c00 	mov.w	ip, #0
 8004b7a:	46d9      	mov	r9, fp
 8004b7c:	46e2      	mov	sl, ip
 8004b7e:	eb19 0309 	adds.w	r3, r9, r9
 8004b82:	eb4a 040a 	adc.w	r4, sl, sl
 8004b86:	4699      	mov	r9, r3
 8004b88:	46a2      	mov	sl, r4
 8004b8a:	eb19 090b 	adds.w	r9, r9, fp
 8004b8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ba2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	4692      	mov	sl, r2
 8004baa:	eb1b 0509 	adds.w	r5, fp, r9
 8004bae:	eb4c 060a 	adc.w	r6, ip, sl
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	0094      	lsls	r4, r2, #2
 8004bc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bca:	008b      	lsls	r3, r1, #2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	f7fb fafe 	bl	80001d4 <__aeabi_uldivmod>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a72      	ldr	r2, [pc, #456]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4442      	add	r2, r8
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	e0d0      	b.n	8004daa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fd02 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	469a      	mov	sl, r3
 8004c12:	f04f 0b00 	mov.w	fp, #0
 8004c16:	46d0      	mov	r8, sl
 8004c18:	46d9      	mov	r9, fp
 8004c1a:	eb18 0308 	adds.w	r3, r8, r8
 8004c1e:	eb49 0409 	adc.w	r4, r9, r9
 8004c22:	4698      	mov	r8, r3
 8004c24:	46a1      	mov	r9, r4
 8004c26:	eb18 080a 	adds.w	r8, r8, sl
 8004c2a:	eb49 090b 	adc.w	r9, r9, fp
 8004c2e:	f04f 0100 	mov.w	r1, #0
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c42:	4688      	mov	r8, r1
 8004c44:	4691      	mov	r9, r2
 8004c46:	eb1a 0508 	adds.w	r5, sl, r8
 8004c4a:	eb4b 0609 	adc.w	r6, fp, r9
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4619      	mov	r1, r3
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	f04f 0400 	mov.w	r4, #0
 8004c60:	0094      	lsls	r4, r2, #2
 8004c62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	4631      	mov	r1, r6
 8004c70:	f7fb fab0 	bl	80001d4 <__aeabi_uldivmod>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b50      	ldr	r3, [pc, #320]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	469b      	mov	fp, r3
 8004c8a:	f04f 0c00 	mov.w	ip, #0
 8004c8e:	46d9      	mov	r9, fp
 8004c90:	46e2      	mov	sl, ip
 8004c92:	eb19 0309 	adds.w	r3, r9, r9
 8004c96:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	46a2      	mov	sl, r4
 8004c9e:	eb19 090b 	adds.w	r9, r9, fp
 8004ca2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cba:	4689      	mov	r9, r1
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004cc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f04f 0400 	mov.w	r4, #0
 8004cd8:	0094      	lsls	r4, r2, #2
 8004cda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cde:	008b      	lsls	r3, r1, #2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	f7fb fa74 	bl	80001d4 <__aeabi_uldivmod>
 8004cec:	4603      	mov	r3, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	; 0x32
 8004d06:	4a2d      	ldr	r2, [pc, #180]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d12:	4498      	add	r8, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	469b      	mov	fp, r3
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	46d9      	mov	r9, fp
 8004d1e:	46e2      	mov	sl, ip
 8004d20:	eb19 0309 	adds.w	r3, r9, r9
 8004d24:	eb4a 040a 	adc.w	r4, sl, sl
 8004d28:	4699      	mov	r9, r3
 8004d2a:	46a2      	mov	sl, r4
 8004d2c:	eb19 090b 	adds.w	r9, r9, fp
 8004d30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d48:	4689      	mov	r9, r1
 8004d4a:	4692      	mov	sl, r2
 8004d4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d50:	eb4c 060a 	adc.w	r6, ip, sl
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	0094      	lsls	r4, r2, #2
 8004d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d6c:	008b      	lsls	r3, r1, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4623      	mov	r3, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	4631      	mov	r1, r6
 8004d76:	f7fb fa2d 	bl	80001d4 <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d82:	fba3 1302 	umull	r1, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2164      	movs	r1, #100	; 0x64
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	; 0x32
 8004d94:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <UART_SetConfig+0x6f4>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4442      	add	r2, r8
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	e7ff      	b.n	8004daa <UART_SetConfig+0x6e2>
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	40011000 	.word	0x40011000
 8004db8:	40011400 	.word	0x40011400
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0d      	ldr	r6, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1ba4      	subs	r4, r4, r6
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2500      	movs	r5, #0
 8004dcc:	42a5      	cmp	r5, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4e0b      	ldr	r6, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f000 f820 	bl	8004e18 <_init>
 8004dd8:	1ba4      	subs	r4, r4, r6
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2500      	movs	r5, #0
 8004dde:	42a5      	cmp	r5, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004de8:	4798      	blx	r3
 8004dea:	3501      	adds	r5, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004df2:	4798      	blx	r3
 8004df4:	3501      	adds	r5, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08004e50 	.word	0x08004e50
 8004dfc:	08004e50 	.word	0x08004e50
 8004e00:	08004e50 	.word	0x08004e50
 8004e04:	08004e54 	.word	0x08004e54

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <_init>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr

08004e24 <_fini>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr
